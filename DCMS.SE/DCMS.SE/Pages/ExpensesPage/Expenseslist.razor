@page "/expenses/expenseslist"
@inject IStringLocalizer<App> localizer
@inject ILocalStorageService sessionStorage
@inject IRole _role
@inject IExpensesMaster _expensesMaster
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel
@using System.IO
<div class="main-content pt-4">
    <div>
        <div class="breadcrumb">
            <h1>@localizer["费用"]</h1>
            <ul>
                <li><a href=""> @localizer["费用单"] </a></li>
                <li>@localizer["列表"] </li>
            </ul>
        </div>
        <div class="separator-breadcrumb border-top">
        </div>
    </div>
    <div class="card wrapper">
        <div class="card-body">
            <div class="vgt-wrap ">
                <div class="vgt-inner-wrap">
                    <div class="vgt-global-search vgt-clearfix">
                        <div class="vgt-global-search__actions vgt-pull-right">
                            <div class="mt-2 mb-3">

                                <MudButton Link="/expenses/expensesadd" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Add">添加</MudButton>

                                <button class="btn btn-outline-success ripple m-1" @onclick="GeneratePdf">
                                    <i class="i-File-TXT"></i> PDF
                                </button>
                                <button type="button" @onclick="@(async ()=> {await GenerateExcel();})" class="btn btn-outline-danger btn-icon m-1">
                                    <i class="i-File-Excel"></i> EXCEL
                                </button>
                                <MudButton Variant="Variant.Filled" Color="Color.Info" EndIcon="@Icons.Material.Filled.ImportantDevices">导入</MudButton>

                                <MudButton Variant="Variant.Filled" Color="Color.Warning" EndIcon="@Icons.Material.Filled.Print">打印</MudButton>
                            </div>
                        </div>
                    </div>
                    <div class="vgt-responsive">
                        <MudTable Items="@listModel" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ExpensesMasterView,bool>(Search)">
                            <ToolBarContent>
                                <MudTextField @bind-Value="searchString1" Placeholder="搜索" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>@localizer["来源"]</MudTh>
                                <MudTh>@localizer["日期"]</MudTh>
                                <MudTh>@localizer["明细"]</MudTh>
                                <MudTh>@localizer["金额"]</MudTh>
                                <MudTh>@localizer["类别"]</MudTh>
                                <MudTh>@localizer["仓库"]</MudTh>
                                <MudTh>操作</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="">@context.VoucherNo</MudTd>
                                <MudTd DataLabel="">@context.Date</MudTd>
                                <MudTd DataLabel="">@context.Narration</MudTd>
                                <MudTd DataLabel="">@context.Amount</MudTd>
                                <MudTd DataLabel="">@context.TerminalName</MudTd>
                                <MudTd DataLabel="">@context.WarehouseName</MudTd>
                                <MudTd DataLabel="">
                                    <center>
                                        <a style="cursor:pointer;" href="/expenses/expensesedit/@context.ExpensiveMasterId">
                                            <i class="i-Edit text-25 text-success"></i>
                                        </a>
                                        <a style="cursor:pointer;" @onclick="() => Delete(context.ExpensiveMasterId)">
                                            <i class="i-Close-Window text-25 text-danger"></i>
                                        </a>

                                    </center>
                                </MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] {10, 20, 50, 100}" RowsPerPageString="每页行数" />
                            </PagerContent>
                        </MudTable>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string searchString2 = "";
    List<ExpensesMasterView> listModel = new List<ExpensesMasterView>();
    int decExpenseVoucherType = 10;
    string strMenu = "Expenses";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    int RoleId = 1;
    Privilege privi = new Privilege();

    protected override void OnInitialized()
    {
        //RoleId = await sessionStorage.GetItemAsync<int>("RoleId");
        //CheckPriviliage
        privi = _role.PriviliageCheck(strMenu, RoleId, 1);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Snackbar.Add("You dont have to privilege.", Severity.Success);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        LoadData();
        StateHasChanged();
    }
    private void LoadData()
    {
        listModel = _expensesMaster.ViewAll(1);
    }
    async Task Delete(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            ExpenseMaster view = new ExpenseMaster();
            view = _expensesMaster.EdiById(id);
            bool isSave = false;
            isSave = _expensesMaster.Delete(id, view.VoucherNo, decExpenseVoucherType, 1, 1);
            if (isSave == true)
            {
                Snackbar.Add("Delete Successfully.", Severity.Success);
                LoadData();
            }
            else
            {
                Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
            }
        }
    }
    private bool Search(ExpensesMasterView element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;
        if (element.TerminalName.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.WarehouseName.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    protected async Task GenerateExcel()
    {
        IWorkbook workbook = new XSSFWorkbook();
        var dataFormat = workbook.CreateDataFormat();
        var dataStyle = workbook.CreateCellStyle();
        dataStyle.DataFormat = dataFormat.GetFormat("MM/yy/dddd HH:mm:ss");
        ISheet worksheet = workbook.CreateSheet("Sheet1");



        int rowNumber1 = 0;
        IRow row1 = worksheet.CreateRow(rowNumber1++);
        //TbleHeder
        ICell cell1 = row1.CreateCell(3);
        cell1.SetCellValue("Expenses");

        int rowNumber = 1;
        IRow row = worksheet.CreateRow(rowNumber++);
        //TbleHeder
        ICell cell = row.CreateCell(0);
        cell.SetCellValue("Voucher No");

        cell = row.CreateCell(1);
        cell.SetCellValue("Date");

        cell = row.CreateCell(2);
        cell.SetCellValue("Details");

        cell = row.CreateCell(3);
        cell.SetCellValue("Amount");

        cell = row.CreateCell(4);
        cell.SetCellValue("Category");

        cell = row.CreateCell(5);
        cell.SetCellValue("Warehouse");

        //Tble Body
        foreach (var objDue in listModel)
        {
            row = worksheet.CreateRow(rowNumber++);

            cell = row.CreateCell(0);
            cell.SetCellValue(objDue.VoucherNo);

            cell = row.CreateCell(1);
            cell.SetCellValue(objDue.Date.ToString());

            cell = row.CreateCell(2);
            cell.SetCellValue(objDue.Narration);

            cell = row.CreateCell(3);
            cell.SetCellValue(objDue.Amount.ToString());

            cell = row.CreateCell(4);
            cell.SetCellValue(objDue.TerminalName.ToString());

            cell = row.CreateCell(5);
            cell.SetCellValue(objDue.WarehouseName.ToString());
        }
        MemoryStream ms = new MemoryStream();
        workbook.Write(ms);
        byte[] bytes = ms.ToArray();
        ms.Close();

        await JsRuntime.SaveAsFileAsync("Expenses", bytes, "application/vnd.ms-excel");
    }
    private void GeneratePdf()
    {
        PdfExpenses pdfExp = new PdfExpenses();
        JsRuntime.InvokeAsync<ExpensesMasterView>(
            "saveAsFile",
            "ExpensesList.pdf",
            Convert.ToBase64String(pdfExp.Report(listModel))
        );
    }
}