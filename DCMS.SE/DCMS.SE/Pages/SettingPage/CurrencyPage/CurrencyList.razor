@page "/setting/currencylist"
@inject IStringLocalizer<App> localizer
@inject ILocalStorageService sessionStorage
@inject IRole _role
@inject ICurrency _currency
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager
@inject ISnackbar Snackbar
<div class="main-content pt-4">
    <div>
        <div class="breadcrumb"><h1>@localizer["Currency"]</h1>
            <ul>
                <li><a href=""> @localizer["Setting"] </a></li> 
                <li> @localizer["Currency"] </li>
            </ul>
            </div>
            <div class="separator-breadcrumb border-top">

            </div>
            </div>
            <div class="card wrapper">
            <div class="card-body">
            <div class="vgt-wrap "> 
            <div class="vgt-inner-wrap">
                <div class="vgt-global-search vgt-clearfix">
                 <div class="vgt-global-search__actions vgt-pull-right">
                     <div class="mt-2 mb-3">
                         <button type="button" @onclick="@ShowModel" class="btn btn-rounded btn-btn btn-primary btn-icon m-1" data-toggle="modal" data-target="#verifyModalContent2" data-whatever=""><i class="i-Add"></i>
          @localizer["Create"]
        </button>
        </div>
        </div>
        </div>
        <div class="vgt-responsive">
            <MudTable Items="@listModel" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Currency,bool>(Search)">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString1" Placeholder="搜索" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>@localizer["Currency Name"]</MudTh>
        <MudTh>@localizer["Symbol"]</MudTh>
        <MudTh>操作</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="">@context.CurrencyName</MudTd>
        <MudTd DataLabel="">@context.CurrencySymbol</MudTd>
        <MudTd DataLabel="">
            <center>


                                                  <MudButton @onclick="() => EditModel(context.CurrencyId)" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Edit">编辑</MudButton>

                                        <MudButton  @onclick="() => Delete(context.CurrencyId)" Variant="Variant.Filled" Color="Color.Error" EndIcon="@Icons.Material.Filled.Delete">删除</MudButton>

                                                                                
                                    </center>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {10, 20, 50, 100}" RowsPerPageString="每页行数"/>
    </PagerContent>
</MudTable>
                </div>
        </div>
        </div>
        </div>
        </div>
        </div>



        @if (isShow == true)
{
    <div class="modal fade" id="myModal" style="display:block" aria-modal="true" role="dialog">
       <div class="modal-dialog" role="document">
            <div class="modal-content">
               <!-- Modal Header -->
                <div class="modal-header">
                    <h3 class="modal-title" style="float:left; margin-top: 14px;margin-left:10px;">@Title</h3>
                    <button class="close" type="button"style="margin:0px 0px 0px 0px;" @onclick="@CloseModel"><span aria-hidden="true">×</span></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <input type="hidden" @bind="master.CurrencyId">
                    </div>
                        <div class="form-group">
                            <label class="col-form-label" for="recipient-name-1">@localizer["Currency Name"]</label>
                            <input class="form-control" @bind="master.CurrencyName" type="text" >
                        </div>
                        <div class="form-group">
                            <label class="col-form-label" for="recipient-name-1">@localizer["Symbol"]</label>
                            <input class="form-control" @bind="master.CurrencySymbol" type="text" >
                        </div>
                        <div class="form-group">
                            <label class="col-form-label" for="recipient-name-1">@localizer["Is Active"]</label>
                            <input class="form-control" @bind="master.IsDefault" type="checkbox" >
                        </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModel" type="button">@localizer["Close"]</button>
                    <button class="btn btn-primary" @onclick="() =>Save()" type="button">@localizer["Save"]</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    
}
@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string searchString2 = "";
    Currency master = new Currency();
    List<Currency> listModel;
    bool isShow = false;
    string Title;
    string strMenu = "Currency";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    int RoleId = 1;
    Privilege privi = new Privilege();
    protected  override void OnInitialized()
    {
        //RoleId = await sessionStorage.GetItemAsync<int>("RoleId");
        //CheckPriviliage
        privi = _role.PriviliageCheck(strMenu, RoleId, 1);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Snackbar.Add("You dont have to privilege.", Severity.Success);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        LoadData();
        StateHasChanged();
    }
    private  void LoadData()
    {
        isShow = false;
        listModel = _currency.GetAll();
        StateHasChanged();
    }
    private  void Save()
    {
        if (master.CurrencyId == 0)
        {
            if (master.CurrencyName == string.Empty)
            {
                Snackbar.Add("Type Currency Name.", Severity.Info);
            }
            else
            {
                var isCheck = _currency.CheckName(master.CurrencyName);
                if (isCheck == true)
                {
                    Snackbar.Add("Already Exists.", Severity.Success);
                }
                else
                {
                    master.AddedDate = DateTime.UtcNow;
                    _currency.Save(master);
                    LoadData();
                    Snackbar.Add("Saved Successfully.", Severity.Success);
                }
            }
        }
        else
        {
            if (master.CurrencyName == string.Empty)
            {
                Snackbar.Add("Type Currency Name.", Severity.Info);
            }
            else
            {
                var isCheck = _currency.CheckNameId(master.CurrencyName);
                if (isCheck == master.CurrencyId || isCheck == 0)
                {
                    master.ModifyDate = DateTime.UtcNow;
                    _currency.Update(master);
                    LoadData();
                    Snackbar.Add("Saved Successfully.", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Already Exists.", Severity.Info);
                }
            }
        }
    }
    void EditModel(int id)
    {
        isShow = true;
        Title = "Edit Currency";
        master = _currency.Edit(id);
    }
   async Task Delete(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            if (id != 1)
            {
                bool isSave = false;
                isSave = _currency.Delete(id);
                if (isSave == true)
                {
                    Snackbar.Add("Delete Successfully.", Severity.Success);
                    LoadData();
                }
                else
                {
                    Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
                }
            }
            else
            {
                Snackbar.Add("Default data cannot be delete.", Severity.Info);
            }
        }
    }
    private void ShowModel()
    {
        isShow = true;
        Title = "Add Currency";
        master.CurrencyId = 0;
        master.CurrencyName = string.Empty;
        master.CurrencySymbol = string.Empty;
        master.NoOfDecimalPlaces = 0;
        master.IsDefault = true;
        StateHasChanged();
    }
    private void CloseModel()
    {
        isShow = false;
        master.CurrencyId = 0;
        master.CurrencyName = string.Empty;
        master.CurrencySymbol = string.Empty;
        master.NoOfDecimalPlaces = 0;
        master.IsDefault = true;
        StateHasChanged();
    }
    private bool Search(Currency element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;
        if (element.CurrencyName.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}