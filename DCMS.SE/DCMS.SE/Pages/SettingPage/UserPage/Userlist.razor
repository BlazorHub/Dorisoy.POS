@page "/setting/userlist"
@inject IStringLocalizer<App> localizer
@inject ILocalStorageService sessionStorage
@inject IRole _role
@inject ILogin  authService
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager
@inject ISnackbar Snackbar
<div class="main-content pt-4">
    <div>
        <div class="breadcrumb"><h1> @localizer["User"]</h1>
            <ul>
                <li><a href=""> @localizer["Setting"] </a></li> 
                <li> @localizer["User List"] </li>
            </ul>
            </div>
            <div class="separator-breadcrumb border-top">

            </div>
            </div>
            <div class="card wrapper">
            <div class="card-body">
            <div class="vgt-wrap "> 
            <div class="vgt-inner-wrap">
                
        <div class="vgt-responsive">



            <div class="row">
                <div class="col-md-12">
                    <div class="card">
<div class="card-body">
                                <div class="card-title mb-3">@localizer["Warehouse"]</div>
                                    <div class="row">
                                        <div class="col-md-6 form-group mb-3">
                                            <label for="firstName1">@localizer["Role Name"]</label>
                                            <select @bind="model.RoleId" class="form-control">
                                        <option value="0">选择</option>
                                        @foreach (var item in roles)
                                        {
                                            <option value="@item.RoleId">@item.RoleDesc</option>
                                        }
                                    </select>
                                        </div>
                                        <div class="col-md-6 form-group mb-3">
                                            <label for="lastName1">@localizer["First Name"]</label>
                                            <input class="form-control" @bind="model.FirstName" type="text">
                                        </div>
                                        <div class="col-md-6 form-group mb-3">
                                            <label for="lastName1">@localizer["Last Name"]</label>
                                            <input class="form-control" @bind="model.LastName" type="text">
                                        </div>
                                        <div class="col-md-6 form-group mb-3">
                                            <label for="lastName1">@localizer["Email"]</label>
                                            <input class="form-control" @bind="model.EmailAddress" type="text">
                                        </div>
                                        <div class="col-md-6 form-group mb-3">
                                            <label for="lastName1">@localizer["Password"]</label>
                                            <input class="form-control" @bind="model.Password" type="password">
                                        </div>
                                        <div class="col-md-6 form-group mb-3">
                                            <label for="lastName1">@localizer["Confirm Password"]</label>
                                            <input class="form-control" @bind="model.ConfirmPassword" type="password">
                                        </div>
                                        <div class="col-md-12">
                                            <button class="btn btn-primary" type="button" @onclick="SaveUser">@localizer["Submit"]</button>
                                            <button type="button" class="btn btn-danger" @onclick="@Cancel">返回</button>
                                        </div>
                                    </div>
                            </div>
            </div> 
            </div>
            </div>
            <MudTable Items="@listUser" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<LoginRequest,bool>(Search)">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString1" Placeholder="搜索" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>@localizer["First Name"]</MudTh>
        <MudTh>@localizer["Last Name"]</MudTh>
        <MudTh>@localizer["Email"]</MudTh>
        <MudTh>@localizer["Role"]</MudTh>
        <MudTh>操作</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="">@context.FirstName</MudTd>
        <MudTd DataLabel="">@context.LastName</MudTd>
        <MudTd DataLabel="">@context.Email</MudTd>
        <MudTd DataLabel="">@context.RoleName</MudTd>
        <MudTd DataLabel="">
            <center>
                    @*                 <a class="btn btn-info btn-sm" @onclick="() => Edit(context.UserId)">
                                                Edit
                                            </a> |
                                            <a class="btn btn-danger btn-sm" @onclick="() => Delete(context.UserId)">
                                                Delete
                                            </a>                *@   
                                            

                                               <MudButton @onclick="() => Edit(context.UserId)" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Edit">编辑</MudButton>

                                        <MudButton  @onclick="() => Delete(context.UserId)" Variant="Variant.Filled" Color="Color.Error" EndIcon="@Icons.Material.Filled.Delete">删除</MudButton>
                                    </center>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {10, 20, 50, 100}" RowsPerPageString="每页行数"/>
    </PagerContent>
</MudTable>
                </div>
        </div>
        </div>
        </div>
        </div>
        </div>



@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string searchString2 = "";
    List<LoginRequest> listUser = new List<LoginRequest>();
    List<Roles> roles = new List<Roles>();
    Users model = new Users();
    //GetSessionInfo
    public byte[] ImageUploaded { get; set; }
    string strMenu = "User";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    int RoleId = 1;
    Privilege privi = new Privilege();
    protected  override void OnInitialized()
    {
        //RoleId = await sessionStorage.GetItemAsync<int>("RoleId");
        //CheckPriviliage
        privi = _role.PriviliageCheck(strMenu, RoleId, 1);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Snackbar.Add("You dont have to privilege.", Severity.Success);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        Load();
        StateHasChanged();
    }
    private  void Load()
    {
        model.UserId = 0;
        model.EmailAddress = string.Empty;
        model.FirstName = string.Empty;
        model.LastName = string.Empty;
        model.Password = string.Empty;
        listUser = authService.ViewUser(1);
        roles = authService.ViewRole();
        StateHasChanged();
    }
    public void SaveUser()
    {
        if (model.RoleId == 0)
        {
            Snackbar.Add("Choose Role.", Severity.Info);
            return;
        }
        else if (model.EmailAddress == string.Empty)
        {
            Snackbar.Add("Type Email.", Severity.Info);
            return;
        }
        else if (model.FirstName == string.Empty)
        {
            Snackbar.Add("Type FirstName.", Severity.Info);
            return;
        }
        else if (model.Password == string.Empty)
        {
            Snackbar.Add("Type Password.", Severity.Info);
            return;
        }
        else if (model.ConfirmPassword == string.Empty)
        {
            Snackbar.Add("Type ConfirmPassword.", Severity.Info);
            return;
        }
        else
        {
            if (model.UserId == 0)
            {
                    model.Password = Utility.Encrypt(model.Password);
                    model.StoreId = 1;
                    model.Source = "DCMS.SE";
                    model.HireDate = DateTime.Now;
                    bool isSave = false;
                    isSave = authService.Save(model);
                    if (isSave == true)
                    {
                        Snackbar.Add("Saved Successfully.", Severity.Success);
                        Load();
                    }
                    else
                    {
                        Snackbar.Add("Already exists.", Severity.Success);
                    }
            }
            else
            {
                    model.Password = Utility.Encrypt(model.Password);
                    model.StoreId = 1;
                    model.Source = "DCMS.SE";
                    if (authService.Update(model))
                    {
                        Snackbar.Add("Updated Successfully.", Severity.Success);
                        Load();
                    }
                    else
                    {
                        Snackbar.Add("Already Exists.", Severity.Success);
                    }
            }
        }
    }
    async Task Delete(long id)
    {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            if (confirmed)
            {
                if (model.UserId == 1)
                {

                    bool isSave = false;
                    isSave = authService.Delete(id);
                    if (isSave == true)
                    {
                        Snackbar.Add("Deleted Successfully.", Severity.Success);
                        Load();
                    }
                    else
                    {
                        Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
                    }
                }
                else
                {
                    Snackbar.Add("Default admin cannot be delete.", Severity.Info);
                }
            }
    }
    void Edit(long id)
    {
        model = authService.Edit(Convert.ToInt64(id));
    }
    void Cancel()
    {
        Load();
    }
    private bool Search(LoginRequest element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;
        if (element.Email.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}