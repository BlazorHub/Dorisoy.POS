@page "/setting/brandlist"
@inject IStringLocalizer<App> localizer
@inject ILocalStorageService sessionStorage
@inject IRole _role
@using DCMS.SE.Services.IService
@inject IBrand _brand
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IFileUpload FileUpload
<div class="main-content pt-4">
    <div>
        <div class="breadcrumb"><h1>@localizer["Brand"]</h1>
            <ul>
                <li><a href=""> @localizer["Setting"] </a></li> 
                <li> @localizer["Brand"] </li>
            </ul>
            </div>
            <div class="separator-breadcrumb border-top">

            </div>
            </div>
            <div class="card wrapper">
            <div class="card-body">
            <div class="vgt-wrap "> 
            <div class="vgt-inner-wrap">
                <div class="vgt-global-search vgt-clearfix">
                 <div class="vgt-global-search__actions vgt-pull-right">
                     <div class="mt-2 mb-3">
                         <a type="button" href="/setting/brandadd" class="btn btn-rounded btn-btn btn-primary btn-icon m-1"><i class="i-Add"></i>
          @localizer["Create"]
        </a>
        </div>
        </div>
        </div>
        <div class="vgt-responsive">
            <MudTable Items="@listModel" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Brand,bool>(Search)">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString1" Placeholder="搜索" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>@localizer["Image"]</MudTh>
        <MudTh>@localizer["Brand"]</MudTh>
        <MudTh>操作</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="">
            @if (context.Image != null)
                                    {
                                        <img src="@(context.Image)" width="40" height="40" />
                                    }
                                    else
                                    {
                                        <img src="img/logo.jpg" width="40" height="40" />
                                    }
                                    </MudTd>
        <MudTd DataLabel="">@context.Name</MudTd>
        <MudTd DataLabel="">
            <center>
                                  @*   <a style="cursor:pointer;" href="/setting/brandedit/@context.BrandId">
                                         <i class="i-Edit text-25 text-success"></i>
                                         </a>
                                          <a style="cursor:pointer;" @onclick="() => Delete(context.BrandId)">
                                              <i class="i-Close-Window text-25 text-danger"></i></a>*@

                                               <MudButton Link="@("/setting/brandedit/"+context.BrandId)" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Edit">编辑</MudButton>

                                        <MudButton  @onclick="() => Delete(context.BrandId)" Variant="Variant.Filled" Color="Color.Error" EndIcon="@Icons.Material.Filled.Delete">删除</MudButton>
                                                                                
                                    </center>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {10, 20, 50, 100}" RowsPerPageString="每页行数"/>
    </PagerContent>
</MudTable>
                </div>
        </div>
        </div>
        </div>
        </div>
        </div>



@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string searchString2 = "";
    Brand master = new Brand();
    List<Brand> listModel;
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    private bool IsImageUploadProcessStarted { get; set; } = false;
    string strMenu = "Brand";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    int RoleId = 1;
    Privilege privi = new Privilege();
    protected  override void OnInitialized()
    {
        //RoleId = await sessionStorage.GetItemAsync<int>("RoleId");
        //CheckPriviliage
        privi = _role.PriviliageCheck(strMenu, RoleId, 1);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Snackbar.Add("You dont have to privilege.", Severity.Success);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        LoadData();
        StateHasChanged();
    }
    private  void LoadData()
    {
        listModel = _brand.GetAll();
        StateHasChanged();
    }
    async Task Delete(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
                bool isSave = false;
                isSave = _brand.Delete(id);
                if (isSave == true)
                {
                    Snackbar.Add("Delete Successfully.", Severity.Success);
                    LoadData();
                }
                else
                {
                    Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
                }
        }
    }
    private bool Search(Brand element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;
        if (element.Name.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}