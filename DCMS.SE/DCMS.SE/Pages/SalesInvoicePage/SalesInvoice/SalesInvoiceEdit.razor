@page "/sales/salesinvoiceedit/{id}"
@inject IStringLocalizer<App> localizer
@inject ILocalStorageService sessionStorage
@inject IRole _role
@inject IProduct _product
@inject IWarehouse _warehouse
@inject IAccountLedger _accountLedger
@inject ICartSalesService CartService
@inject IVoucherType _voucherType
@inject ISalesInvoice _salesInvoice
@inject ITax _tax
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@using Radzen

<div class="main-content pt-4">
    <div>
         <div class="breadcrumb"><h1> @localizer["销售"]</h1>
            <ul>
                <li><a href=""> @localizer["销售单"] </a></li> 
                <li> @localizer["编辑"] </li>
            </ul>
            </div>
            <div class="separator-breadcrumb border-top">

            </div>
            </div>
            <div class="card wrapper">
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="mb-3 col-sm-12 col-md-4 col-lg-4">
                                    <span>
                                        <fieldset class="form-group">
                                            <legend class="bv-no-focus-ring col-form-label pt-0">@localizer["Date"]
                                            </legend>
                                            <div>
                                                <input type="date" @bind="master.Date" class="form-control"> 
                                                </div>
                                                </fieldset>
                                                </span>
                                                </div>
                                                <div class="mb-3 col-sm-12 col-md-4 col-lg-4">
                                    <span>
                                        <fieldset class="form-group">
                                            <legend class="bv-no-focus-ring col-form-label pt-0">@localizer["Voucher No"]

                                            </legend>
                                            <div>
                                                <input type="text" @bind="master.VoucherNo" readonly class="form-control"> 
                                                </div>
                                                </fieldset>
                                                </span>
                                                </div>
                                                <div class="mb-3 col-sm-12 col-md-4 col-lg-4">
                                    <span>
                                        <fieldset class="form-group">
                                            <legend class="bv-no-focus-ring col-form-label pt-0">@localizer["仓库"]

                                            </legend>
                                            <div>
                                                <select class="form-control" @bind="master.WarehouseId">
                                                    <option value="0">选择</option>
                                                    @foreach(var item in listWarehouse)
                                                    {
                                                        <option value="@item.WarehouseId">@item.Name</option>
                                                    }
                                                </select>
                                                </div>
                                                </fieldset>
                                                </span>
                                                </div>
                                                <div class="mb-3 col-sm-12 col-md-6 col-lg-6">
                                    <span>
                                        <fieldset class="form-group">
                                            <legend class="bv-no-focus-ring col-form-label pt-0">@localizer["Customer"]

                                            </legend>
                                            <div>
                                                <Radzen.Blazor.RadzenDropDown AllowClear="true" @bind-Value="master.LedgerId" AllowVirtualization="true" Class="w-100" 
                            AllowFiltering="true" Data=@listAccountledger TextProperty="LedgerName" ValueProperty="LedgerId"
         Change="() =>LedgerClicked()" style="height:32px; font-size:10px;" />
                                                </div>
                                                </fieldset>
                                                </span>
                                                </div>

                                                <div class="mb-5 col-md-12">
                                                    <h6>@localizer["Product"]</h6>
                                                    <div id="autocomplete" class="autocomplete">
                                                        <Radzen.Blazor.RadzenAutoComplete Data=@listProduct TextProperty="ProductName" Change=@(args => OnChange(args, "AutoComplete")) Style="width: 100%;" placeholder="根据商品名称或者编码搜索商品" />
                                                        </div>
                                                        </div>



                                                        <div class="col-md-12">
                                                            <h5>单据项目 *</h5>
                                                            <div class="table-responsive">
                                                                <table class="table table-hover">
                                                                    <thead class="bg-gray-300">
                                                                        <tr>
                                                                            <th scope="col">@localizer["Product"]</th>
                                                                            <th scope="col">@localizer["Stock"]</th>
                                                                            <th scope="col">@localizer["Qty"]</th>
                                                                            <th scope="col">@localizer["Unit"]</th> 
                                                                            <th scope="col">@localizer["Net Unit Cost"]</th>
                                                                            <th scope="col">@localizer["Total"]</th> 
                                                                            <th scope="col">@localizer["Discount"]</th> 
                                                                            <th scope="col">@localizer["Tax"]</th> 
                                                                            <th scope="col">@localizer["Subtotal"]</th> 
                                                                            <th scope="col" class="text-center"></th>
                                                                            </tr>
                                                                            </thead> 
                                                                            <tbody>
@{
                                int sno = 0;
                            }
                            @if (cartItems != null && cartItems.Count > 0)
                            {
                                @foreach (var td in cartItems)
                                        {
                                    <tr role="row">
                                        <td class=" align-middle">
                                                <span class="badge badge-success">@td.ProductName</span>
                                                
                                                <button type="button" @onclick="()=>ShowModel(td.ProductId)" class="" data-toggle="modal" data-target="#verifyModalContent2" data-whatever=""><i class="i-Edit"></i></button>
                                            </td>
                                        <td class=" align-middle"><span class="badge badge-outline-warning">@td.CurrentStock
                                        </span></td>
                                        <td class=" align-middle">
                                            <EditForm Model="td">
                                                <div class="quantity">
                                                    <div role="group" class="input-group">
                                                        <div class="input-group-prepend">
                                                            <a @onclick="() => AddToCartAsc(td)"><span class="btn btn-primary btn-sm" style="padding:8px;">-</span>
                                                                     </a>
                                                            </div> 
                                                            <input type="number" id="quantity" @bind="td.Qty"
                                                                         class="form-control border-form-control" style="width: 40px" readonly />
                                                            <div class="input-group-append">
                                                                 <a @onclick="() => AddToCartDsc(td)"><span class="btn btn-primary btn-sm">+</span>
                                                                     </a>
                                                                     </div>
                                                                    </div>
                                                                    </div>

                                                              
                                                                     </EditForm>
                                        </td>
                                        <td class=" align-middle">@td.UnitName</td>
                                        <td class=" align-middle">@td.SalesRate</td>
                                        <td class=" align-middle">@td.Amount</td>
                                            <td class=" align-middle">@td.DiscountAmount</td>
                                            <td class=" align-middle">@td.TaxAmount</td>
                                        <td class=" align-middle">
                                          @td.TotalAmount
                                           </td>
                                        <td>
                                            <a title="Delete" class="btn btn-icon btn-sm" @onclick="(() => DeleteItem(td))"><i class="i-Close-Window text-25 text-danger"></i></a>
                                        </td>
                                    </tr>
                                }
                            }
                                                                            </tbody>
                                                                            </table>
                                                                            </div>
                                                                            </div>



                                                                            <div class="offset-md-9 col-md-3 mt-4">
                                                                                <table class="table table-striped table-sm">
                                                                                    <tbody>
                                                                                        <tr><td class="bold">@localizer["Order Tax"]</td>
                                                                                            <td><span>@master.TotalTax (@master.TaxRate %)</span></td>
                                                                                            </tr> <tr><td class="bold">@localizer["Discount"]</td> 
                                                                                                <td>@master.BillDiscount</td></tr> 
                                                                                                <tr><td class="bold">@localizer["Shipping"]</td> 
                                                                                                    <td>@master.ShippingAmount</td></tr>
                                                                                                    <tr><td><span class="font-weight-bold">@localizer["Grand Total"]</span></td>
                                                                                                        <td><span class="font-weight-bold">@master.GrandTotal</span></td>
                                                                                                        </tr>
                                                                                                        </tbody>
                                                                                                        </table>
                                                                                                        </div>

                                                                                                        <div class="mb-3 col-sm-12 col-md-4 col-lg-4">
                                    <span>
                                        <fieldset class="form-group">
                                            <legend class="bv-no-focus-ring col-form-label pt-0">@localizer["Tax"]

                                            </legend>
                                            <div>
                                                <input type="number" class="form-control" @bind="master.TaxRate" @onkeyup="@CalculateTotal" @bind:event="oninput"> 
                                                </div>
                                                </fieldset>
                                                </span>
                                                </div>
                                                <div class="mb-3 col-sm-12 col-md-4 col-lg-4">
                                    <span>
                                        <fieldset class="form-group">
                                            <legend class="bv-no-focus-ring col-form-label pt-0">@localizer["Discount Amount"]

                                            </legend>
                                            <div>
                                                <input type="number" @bind="master.BillDiscount" class="form-control" @onkeyup="@CalculateTotal" @bind:event="oninput"> 
                                                </div>
                                                </fieldset>
                                                </span>
                                                </div>
                                                <div class="mb-3 col-sm-12 col-md-4 col-lg-4">
                                    <span>
                                        <fieldset class="form-group">
                                            <legend class="bv-no-focus-ring col-form-label pt-0">@localizer["Shipping"]

                                            </legend>
                                            <div>
                                                <input type="number" @bind="master.ShippingAmount" class="form-control" @onkeyup="@CalculateTotal" @bind:event="oninput"> 
                                                </div>
                                                </fieldset>
                                                </span>
                                                </div>



                                                @*<div class="mb-3 col-sm-12 col-md-4 col-lg-4">
                                    <span>
                                        <fieldset class="form-group">
                                            <legend class="bv-no-focus-ring col-form-label pt-0">Payment Status

                                            </legend>
                                            <div>
                                                <select class="form-control" @bind="master.PaymentId">
                                                    <option value="Received">Received</option>
                                                    <option value="Received">Pending</option>
                                                </select>
                                                </div>
                                                </fieldset>
                                                </span>
                                                </div>*@

                                                <div class="col-md-12"><fieldset class="form-group">
                                                    <legend class="bv-no-focus-ring col-form-label pt-0">@localizer["Note"]</legend>
                                                    <div>
                                                        <textarea rows="4" @bind="master.Narration" placeholder="在这里备注 ..." class="form-control">

                                                        </textarea>
                                                        </div>
                                                        </fieldset>
                                                        </div>



                                                        <div class="col-md-12"><fieldset class="form-group">
                                                            <div>
                                                                <button type="button" class="btn btn-primary" @onclick="(() => HandleValidSubmit())">@localizer["Submit"]</button></div>
                                                            </fieldset>
                                                            </div>
                            </div>
                        </div>
                    </div>
            </div>
            </div>
            </div>
            </div>

@if (isShow == true)
{
    <div class="modal fade" id="myModal" style="display:block" aria-modal="true" role="dialog">
       <div class="modal-dialog" role="document">
            <div class="modal-content">
               <!-- Modal Header -->
                <div class="modal-header">
                    <h3 class="modal-title" style="float:left; margin-top: 14px;margin-left:10px;">@productDetails.ProductName , (@productDetails.ProductCode)</h3>
                    <button class="close" type="button"style="margin:0px 0px 0px 0px;" @onclick="@CloseModel"><span aria-hidden="true">×</span></button>
                </div>
                <div class="modal-body">
                        <div class="form-group">
                            <label class="col-form-label" for="recipient-name-1">@localizer["Rate"]:</label>
                            <input class="form-control" @bind="productDetails.SalesRate" readonly type="text" />
                        </div>
                        <div class="form-group">
                            <label class="col-form-label" for="recipient-name-1">@localizer["Tax"]:</label>
                            <select class="form-control" @bind="productDetails.TaxId">
                                @foreach(var item in listTax)
                            {
                                <option value="@item.TaxId">@item.TaxName</option>
                            }
                        </select>
                        </div>
                        <div class="form-group">
                            <label class="col-form-label" for="recipient-name-1">@localizer["Tax"] (%):</label>
                            <input class="form-control" @bind="productDetails.TaxRate" type="text" />
                        </div>
                        <div class="form-group">
                            <label class="col-form-label" for="recipient-name-1">@localizer["Discount Amount"]:</label>
                            <input class="form-control" @bind="productDetails.DiscountAmount" type="text" />
                        </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModel" type="button">@localizer["Close"]</button>
                    <button class="btn btn-primary" @onclick="() =>AddToCart(productDetails)" type="button">@localizer["Save"]</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    
}
@code {
    [Parameter]
    public string id { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    int decPurchaseInvoiceVoucherType = 8;
    SalesMaster master = new SalesMaster();
    CartItem productDetails = new CartItem();
    IEnumerable<ProductView> listProduct;
    List<AccountLedgerView> listAccountledger;
    List<Tax> listTax;
    List<Warehouse> listWarehouse;
    ProductView product = new ProductView();
    //TodoTask
    List<CartItem> cartItems = new List<CartItem>();
    private CartItem cartItem = new CartItem();
    int editedID = 0;
    List<ProductView> TodoList = new List<ProductView>();
    //HoldDeleteItem
    List<DeleteItem> deleteNo = new List<DeleteItem>();
    bool isShow = false;
    string Title;
    string strSerialNo;
    string strMenu = "Sales Invoice";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    int RoleId = 1;
    Privilege privi = new Privilege();
    protected async override void OnInitialized()
    {
        //RoleId = await sessionStorage.GetItemAsync<int>("RoleId");
        //CheckPriviliage
        privi = _role.PriviliageCheck(strMenu, RoleId, 1);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strEdit == false)
            {
                Snackbar.Add("You dont have to privilege.", Severity.Success);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        ClearCart();
        master = _salesInvoice.EditSalesMaster(Convert.ToInt32(id));
        TodoList = _salesInvoice.SalesInvoiceDetails(Convert.ToInt32(id));
        listAccountledger = _accountLedger.ViewAllCustomer(1);
        listWarehouse = _warehouse.GetAll();
        listProduct = _product.ViewAllProduct(1);
        listTax = _tax.GetAll();
        foreach(var myTodoss in TodoList)
        {
            cartItem.SalesDetailsId = myTodoss.SalesDetailsId;
            cartItem.Qty = myTodoss.Qty;
            cartItem.ProductId = myTodoss.ProductId;
            cartItem.ProductCode = myTodoss.ProductCode;
            cartItem.ProductName = myTodoss.ProductName;
            cartItem.Barcode = myTodoss.Barcode;
            cartItem.UnitId = myTodoss.UnitId;
            cartItem.BatchId = myTodoss.BatchId;
            cartItem.PurchaseRate = myTodoss.PurchaseRate;
            cartItem.Mrp = myTodoss.Mrp;
            cartItem.SalesRate = myTodoss.SalesRate;
            cartItem.Discount = myTodoss.Discount;
            cartItem.DiscountAmount = myTodoss.DiscountAmount;
            cartItem.TaxId = myTodoss.TaxId;
            cartItem.TaxRate = myTodoss.TaxRate;
            cartItem.TaxAmount = myTodoss.TaxAmount;
            cartItem.Amount = myTodoss.Amount;
            cartItem.TotalAmount = myTodoss.Amount;
            cartItem.NetAmount = myTodoss.NetAmount;
            cartItem.UnitName = myTodoss.UnitName;
            cartItem.TaxName = myTodoss.TaxName;
            cartItem.CurrentStock = myTodoss.CurrentStock;
            cartItem.CartStatus = "edit";
            await CartService.AddToCart(cartItem);
            StateHasChanged();
        }
        cartItems = await CartService.GetCartItems();
        StateHasChanged();
    }
    private void ClearCart()
    {
        CartService.EmptyCart();
        StateHasChanged();
    }
    public async Task HandleValidSubmit()
    {
        decimal decGrand = 0;
        decimal decCashBankAmount = 0;
        decimal decDue = 0;
        decGrand = master.GrandTotal;
        decCashBankAmount = master.PayAmount;
        decDue = decGrand - decCashBankAmount;
        if (cartItems == null)
        {
            Snackbar.Add("Invalid Entry.", Severity.Warning);
        }
        else if (master.WarehouseId == 0)
        {
            Snackbar.Add("Choose Warehouse.", Severity.Warning);
        }
        else if (master.LedgerId == 0)
        {
            Snackbar.Add("Choose Customer.", Severity.Warning);
        }
        else if (master.VoucherNo == string.Empty)
        {
            Snackbar.Add("Type Voucherno.", Severity.Warning);
        }
        else if (master.GrandTotal == 0)
        {
            Snackbar.Add("Invalid Entry.", Severity.Warning);
        }
        else
        {

            var authState = await authenticationState;
            var user = authState.User;
            string Id = user.Identity.Name.ToString();
                master.UserId = Id;
                master.CompanyId = 1;
                master.FinancialYearId = 1;
                master.VoucherTypeId = decPurchaseInvoiceVoucherType;
                master.PreviousDue = 0;
                master.BalanceDue = 0;
                //master.PaymentId = "Credit";
                if (decDue == 0)
                {
                    master.Status = "Paid";
                }
                else if (master.GrandTotal > decDue)
                {
                    master.Status = "部分支付";
                }
                else
                {
                    master.Status = "草稿";
                }
                master.OrderMasterId = 0;
                master.AddedDate = DateTime.UtcNow;
                foreach (var item in cartItems)
                {
                    SalesDetails details = new SalesDetails();
                    if (item != null)
                    {
                        details.SalesDetailsId = item.SalesDetailsId;
                        details.ProductId = item.ProductId;
                        details.Qty = item.Qty;
                        details.UnitId = item.UnitId;
                        details.Rate = item.SalesRate;
                        details.Amount = item.Amount;
                        details.Discount = item.Discount;
                        details.DiscountAmount = item.DiscountAmount;
                        details.TaxId = item.TaxId;
                        details.TaxAmount = item.TaxAmount;
                        details.BatchId = item.BatchId;
                        details.NetAmount = item.NetAmount;
                        details.GrossAmount = 0;
                        details.OrderDetailsId = 0;
                        master.listOrder.Add(details);
                    }

                }
                foreach (var items in deleteNo)
                {
                    DeleteItem details = new DeleteItem();
                    if (items != null)
                    {
                        details.SalesDetailsId = items.SalesDetailsId;
                        master.listDelete.Add(details);
                    }

                }
               bool isUpdate = _salesInvoice.Update(master);
                if(isUpdate == true)
                {
                    Snackbar.Add("Successfully Updated.", Severity.Success);
                    navManager.NavigateTo("/sales/salesinvoicelist");
                }
        }
        }
    protected  void LedgerClicked()
    {
        if (master.LedgerId > 0)
        {
            //var view = salesInvoiceRepository.CustomerSalesDue(master.LedgerId);
            //master.PreviousDue = view.DueBalance;
        }
        else
        {
            master.PreviousDue = 0;
        }
    }
    protected async void OnChange(object value, string name)
    {
        var myTodoss = listProduct.FirstOrDefault(x => x.ProductName == value.ToString());
        @if (myTodoss != null)
        {
            foreach(var item in cartItems)
            {
                if(myTodoss.ProductId == item.ProductId)
                {
                    Snackbar.Add("This product is already added.", Severity.Warning);
                    return;
                }
            }
            cartItem.SalesDetailsId = 0;
            cartItem.Qty = 1;
            cartItem.ProductId = myTodoss.ProductId;
            cartItem.ProductCode = myTodoss.ProductCode;
            cartItem.ProductName = myTodoss.ProductName;
        cartItem.Barcode = myTodoss.Barcode;
        cartItem.UnitId = myTodoss.UnitId;
        cartItem.BatchId = myTodoss.BatchId;
        cartItem.SalesRate = myTodoss.SalesRate;
        cartItem.Mrp = myTodoss.Mrp;
        cartItem.SalesRate = myTodoss.SalesRate;
        cartItem.Discount = myTodoss.Discount;
        cartItem.DiscountAmount = myTodoss.DiscountAmount;
        cartItem.TaxId = myTodoss.TaxId;
        cartItem.TaxRate = myTodoss.TaxRate;
        cartItem.TaxAmount = myTodoss.TaxAmount;
        cartItem.Amount = Math.Round(1 * myTodoss.SalesRate , 2);
        cartItem.TotalAmount = Math.Round(1 * myTodoss.SalesRate , 2);
        cartItem.NetAmount = myTodoss.NetAmount;
        cartItem.UnitName = myTodoss.UnitName;
        cartItem.TaxName = myTodoss.TaxName;
        cartItem.CurrentStock = myTodoss.CurrentStock;
        await CartService.AddToCart(cartItem);
        //Snackbar.Add("Successfully add to cart.", Severity.Info);
        cartItems = await CartService.GetCartItems();
            listProduct = _product.ViewAllProduct(1);
            CalculateTotal();
            StateHasChanged();
        }
        else
        {
            
        }
    }
    private async Task DeleteItem(CartItem item)
    {
        await CartService.DeleteItem(item);
        cartItems = await CartService.GetCartItems();
        //HoldId
        var myHoldId = new DeleteItem()
        {
            SalesDetailsId = item.SalesDetailsId,
        };
        deleteNo.Add(myHoldId);
        CalculateTotal();
        StateHasChanged();
    }
    private async Task AddToCart(CartItem items)
    {

        cartItem.ProductId = items.ProductId;
        cartItem.ProductCode = items.ProductCode;
        cartItem.ProductName = items.ProductName;
        cartItem.Barcode = items.Barcode;
        cartItem.UnitId = items.UnitId;
        cartItem.BatchId = items.BatchId;
        cartItem.SalesRate = items.SalesRate;
        cartItem.Mrp = items.Mrp;
        cartItem.SalesRate = items.SalesRate;
        cartItem.Discount = items.Discount;
        cartItem.DiscountAmount = items.DiscountAmount;
        cartItem.TaxId = items.TaxId;
        cartItem.TaxRate = items.TaxRate;
        cartItem.TaxAmount = items.TaxAmount;
        cartItem.Amount = items.Amount;
        cartItem.TotalAmount = items.TotalAmount;
        cartItem.NetAmount = items.NetAmount;
        cartItem.UnitName = items.UnitName;
        cartItem.TaxName = items.TaxName;
        cartItem.CurrentStock = items.CurrentStock;
        cartItem.CartStatus = "equal";
        await CartService.AddToCart(cartItem);
        //Snackbar.Add("Successfully add to cart.", Severity.Info);
        cartItems = await CartService.GetCartItems();
        isShow = false;
        CalculateTotal();
        StateHasChanged();
    }
    private async Task AddToCartDsc(CartItem items)
    {

        cartItem.ProductId = items.ProductId;
        cartItem.ProductCode = items.ProductCode;
        cartItem.ProductName = items.ProductName;
        cartItem.Barcode = items.Barcode;
        cartItem.UnitId = items.UnitId;
        cartItem.BatchId = items.BatchId;
        cartItem.SalesRate = items.SalesRate;
        cartItem.Mrp = items.Mrp;
        cartItem.SalesRate = items.SalesRate;
        cartItem.Discount = items.Discount;
        cartItem.DiscountAmount = items.DiscountAmount;
        cartItem.TaxId = items.TaxId;
        cartItem.TaxRate = items.TaxRate;
        cartItem.TaxAmount = items.TaxAmount;
        cartItem.Amount = items.Amount;
        cartItem.TotalAmount = items.TotalAmount;
        cartItem.NetAmount = items.NetAmount;
        cartItem.UnitName = items.UnitName;
        cartItem.TaxName = items.TaxName;
        cartItem.CurrentStock = items.CurrentStock;
        cartItem.CartStatus = "Dsc";

        await CartService.AddToCart(cartItem);
        //Snackbar.Add("Successfully add to cart.", Severity.Info);
        cartItems = await CartService.GetCartItems();
        isShow = false;
        CalculateTotal();
        StateHasChanged();
    }
    private async Task AddToCartAsc(CartItem items)
    {
        if (items.Qty == 1)
        {

        }
        else
        {
            cartItem.ProductId = items.ProductId;
            cartItem.ProductCode = items.ProductCode;
            cartItem.ProductName = items.ProductName;
            cartItem.Barcode = items.Barcode;
            cartItem.UnitId = items.UnitId;
            cartItem.BatchId = items.BatchId;
            cartItem.SalesRate = items.SalesRate;
            cartItem.Mrp = items.Mrp;
            cartItem.SalesRate = items.SalesRate;
            cartItem.Discount = items.Discount;
            cartItem.DiscountAmount = items.DiscountAmount;
            cartItem.TaxId = items.TaxId;
            cartItem.TaxRate = items.TaxRate;
            cartItem.TaxAmount = items.TaxAmount;
            cartItem.Amount = items.Amount;
            cartItem.TotalAmount = items.TotalAmount;
            cartItem.NetAmount = items.NetAmount;
            cartItem.UnitName = items.UnitName;
            cartItem.TaxName = items.TaxName;
            cartItem.CurrentStock = items.CurrentStock;
            cartItem.CartStatus = "Asc";
            await CartService.AddToCart(cartItem);
            //Snackbar.Add("Successfully add to cart.", Severity.Info);
            cartItems = await CartService.GetCartItems();
            isShow = false;
            CalculateTotal();
            StateHasChanged();
        }
    }
    void CalculateTotal()
    {
        decimal decTotalAmount = 0;
        decimal decAdditionalCost = 0;
        decimal decTaxAmount = 0;
        decimal decTotalDisTax = 0;
        decimal decGrandTotalCshbnk = 0;
        decimal decNetAmount = 0;
        decimal decCheckTax = 0;
        decimal decGrandTotal = 0;
        foreach (var todo in cartItems)
        {
            decTotalAmount = decTotalAmount + todo.TotalAmount;
            decNetAmount = decNetAmount + todo.NetAmount;
            decCheckTax = decCheckTax + todo.TaxAmount;
        }
        master.NetAmounts = Math.Round(decNetAmount, 2);
        master.TotalAmount = Math.Round(decTotalAmount, 2);

        decimal decTotalAmountTax = 0;
        decTotalAmountTax = decTotalAmount + master.TotalTax;
        decTotalDisTax = decTotalAmount;
        if (master.BillDiscount > 0)
        {
            master.DisPer = (master.BillDiscount * 100) / (decTotalAmountTax);
        }
        else
        {
            master.DisPer = 0;
        }
        //if (decCheckTax > 0)
        //{
        //    decTaxAmount = Math.Round(decCheckTax, 2);
        //    master.TotalTax = Math.Round(decCheckTax, 2);
        //}
        //else
        //{
        if(master.TaxRate > 0)
        {
            decTaxAmount = decTotalDisTax * master.TaxRate / 100;
            master.TotalTax = Math.Round(decTaxAmount, 2);
        }
        else
        {
            master.TaxRate = 0;
            master.TotalTax = 0;
        }
        //}
        decimal decDiscountAmount = 0;
        decDiscountAmount = master.BillDiscount;
        decGrandTotal = Math.Round((decTotalDisTax + decAdditionalCost + decTaxAmount) - (decDiscountAmount), 2);
        if (decGrandTotal >= 0)
        {
            master.GrandTotal = decGrandTotal + master.ShippingAmount;
        }
        else
        {
            master.BillDiscount = 0;
            master.GrandTotal = decGrandTotal + master.ShippingAmount;
        }
        decGrandTotalCshbnk = master.PayAmount;
        if (master.GrandTotal >= decGrandTotalCshbnk)
        {
            var decTotl = master.GrandTotal - decGrandTotalCshbnk;
            master.PreviousDue = Math.Round(decTotl, 2);
        }
        else
        {
            master.PayAmount = 0;
            master.PreviousDue = 0;
        }
    }
    private void ShowModel(int id)
    {
        isShow = true;
        Title = "Product";
        var myTodoss = cartItems.FirstOrDefault(x => x.ProductId == id);
        @if (myTodoss != null)
        {
            productDetails.ProductId = myTodoss.ProductId;
            productDetails.ProductCode = myTodoss.ProductCode;
            productDetails.ProductName = myTodoss.ProductName;
        productDetails.Barcode = myTodoss.Barcode;
        productDetails.UnitId = myTodoss.UnitId;
        productDetails.SalesRate = myTodoss.SalesRate;
        productDetails.Mrp = myTodoss.Mrp;
        productDetails.SalesRate = myTodoss.SalesRate;
        productDetails.Discount = myTodoss.Discount;
        productDetails.DiscountAmount = myTodoss.DiscountAmount;
        productDetails.TaxId = myTodoss.TaxId;
        productDetails.TaxRate = myTodoss.TaxRate;
        productDetails.TaxAmount = myTodoss.TaxAmount;
        productDetails.Amount = Math.Round(1 * myTodoss.SalesRate , 2);
        productDetails.TotalAmount = Math.Round(1 * myTodoss.SalesRate , 2);
        productDetails.NetAmount = myTodoss.NetAmount;
        productDetails.UnitName = myTodoss.UnitName;
        productDetails.TaxName = myTodoss.TaxName;
        productDetails.CurrentStock = myTodoss.CurrentStock;
        }
        else
        {
            
        }
        StateHasChanged();
    }
    private void CloseModel()
    {
        isShow = false;
        StateHasChanged();
    }
    void Cancel()
    {
        navManager.NavigateTo("/sales/salesinvoicelist");
    }
    }
