// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dreamer.Pages.SalesInvoicePage.SalesInvoice
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services.CartService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Connection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Apimodel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.PdfReport;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Setting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\Pages\SalesInvoicePage\SalesInvoice\SalesInvoicelist.razor"
using NPOI.SS.UserModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\Pages\SalesInvoicePage\SalesInvoice\SalesInvoicelist.razor"
using NPOI.XSSF.UserModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\Pages\SalesInvoicePage\SalesInvoice\SalesInvoicelist.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/sales/salesinvoicelist")]
    public partial class SalesInvoicelist : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 375 "D:\商业项目\Blazor-Pos\Dreamer\Dreamer\Pages\SalesInvoicePage\SalesInvoice\SalesInvoicelist.razor"
       
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string searchString2 = "";
    bool open;
    Anchor anchor;
    List<SalesMasterView> listModel = new List<SalesMasterView>();
    List<AccountLedgerView> listCustomer = new List<AccountLedgerView>();
    List<Warehouse> listWarehouse = new List<Warehouse>();
    DateTime FromDate = DateTime.UtcNow.AddDays(-1);
    DateTime ToDate = DateTime.UtcNow;
    int CustomerId = 0;
    int WarehouseId = 0;
    string Status = "All";
    ReceiptMaster master = new ReceiptMaster();
    int decPaymentSupplierVoucherType = 4;
    string strSerialNo;
    decimal PreviousDue;
    decimal decChangeAmount = 0;
    //Payment
    bool isPayment = false;
    bool isShowPayment = false;
    List<ReceiptMaster> listPayment = new List<ReceiptMaster>();

    string strMenu = "Sales Invoice";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    int RoleId = 1;
    Privilege privi = new Privilege();
    protected async override void OnInitialized()
    {
        //RoleId = await sessionStorage.GetItemAsync<int>("RoleId");
        //CheckPriviliage
        privi = _role.PriviliageCheck(strMenu, RoleId, 1);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Snackbar.Add("You dont have to privilege.", Severity.Success);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        listCustomer = _customer.ViewAllCustomer(1); // 1 is companyid
        listWarehouse = _warehouse.GetAll();
        LoadData();
        StateHasChanged();
    }
    private async void LoadData()
    {
        listModel = _salesInvoice.SalesInvoiceView(1);
    }
    async Task Delete(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            SalesMaster view = new SalesMaster();
            view = _salesInvoice.EditSalesMaster(id);
            bool isSave = false;
            isSave = _salesInvoice.DeleteSalesInvoice(id , view.VoucherNo, 1 , 1);
            if (isSave == true)
            {
                Snackbar.Add("Delete Successfully.", Severity.Success);
                LoadData();
            }
            else
            {
                Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
            }
        }
    }
    private bool Search(SalesMasterView element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;
        if (element.LedgerName.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.VoucherNo.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private async void CreatePayment()
    {
        if (master.LedgerId == 0)
        {
            Snackbar.Add("Choose Supplier.", Severity.Warning);
        }
        else if (master.VoucherNo == string.Empty)
        {
            Snackbar.Add("Type Voucherno.", Severity.Warning);
        }
        else if (master.Amount == 0)
        {
            Snackbar.Add("Type payment amount.", Severity.Warning);
        }
        else
        {

            var authState = await authenticationState;
            var user = authState.User;
            string Id = user.Identity.Name.ToString();
            var strVoucherNo = false;
            if(master.ReceiptMasterId == 0)
            {
                strVoucherNo = _receiveCustomer.ReceiveVoucherNoCheckExistence(1, 1, master.VoucherNo);
                if (strVoucherNo == false)
                {
                    master.SerialNo = strSerialNo;
                    master.UserId = Id;
                    master.CompanyId = 1;
                    master.FinancialYearId = 1;
                    master.VoucherTypeId = decPaymentSupplierVoucherType;
                    master.PreviousDue = PreviousDue;
                    master.AddedDate = DateTime.UtcNow;
                    master.POS = false;
                    bool isSave = _receiveCustomer.Save(master);
                    if(isSave == true)
                    {
                        Snackbar.Add("Successfully Saved.", Severity.Success);
                        isPayment = false;
                        LoadData();
                    }
                    else
                    {
                        Snackbar.Add("Invalid Payment.", Severity.Warning);
                    }
                }
                else
                {
                    Snackbar.Add("Voucher no already exists.", Severity.Info);
                }
            }
            else
            {

            }

        }
    }
    async Task EditPayment(SalesMasterView salesMaster)
    {
        isPayment = true;
        master.LedgerId = salesMaster.LedgerId;
        master.Date = DateTime.UtcNow;
        master.Amount = 0;
        master.SalesMasterId = salesMaster.SalesMasterId;
        master.ReceiptMasterId = 0;
        master.PaymentType = "Cash";
        master.Narration = string.Empty;
        PreviousDue = 0;
        var voucherType = _voucherType.Edit(decPaymentSupplierVoucherType);
        strSerialNo = _receiveCustomer.GetVoucherNo(1, 1, decPaymentSupplierVoucherType);
        master.VoucherNo = voucherType.Prefix + strSerialNo + voucherType.Suffix;
        var view = _receiveCustomer.GetTotalReceiableAmount(salesMaster.SalesMasterId);
        if (view.Amount > 0)
        {
            PreviousDue = salesMaster.BalanceDue;
        }
        else
        {
            PreviousDue = salesMaster.GrandTotal;
        }
        StateHasChanged();
    }
    private void CalculateChange()
    {
        decChangeAmount = Math.Round(PreviousDue - master.Amount , 2);
        if(decChangeAmount >= 0)
        {

        }
        else
        {
            master.Amount = 0;
        }
        StateHasChanged();
    }
    async Task EditPaymentSupplier(int ReceiptMasterId)
    {
        isPayment = true;
        isShowPayment = false;
        master.ReceiptMasterId = ReceiptMasterId;
        master = _receiveCustomer.EdiById(ReceiptMasterId);
        var view = _receiveCustomer.GetTotalReceiableAmount(master.SalesMasterId);
        if (view.Amount > 0)
        {
            PreviousDue = view.Amount;
        }
        else
        {

        }
        StateHasChanged();
    }
    async Task DeletePayment(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this?");
        if (confirmed)
        {
            var view = _receiveCustomer.EditReceiveMaster(id);
            bool isSave = false;
            isSave = _receiveCustomer.DeleteReceiveCustomer( id, view.VoucherNo, view.VoucherTypeId, view.FinancialYearId, view.CompanyId);
            if (isSave == true)
            {
                Snackbar.Add("Deleted Successfully.", Severity.Success);
                isShowPayment = false;
                LoadData();
            }
            else
            {
                isShowPayment = false;
                Snackbar.Add("Cannot be delete. already in used.", Severity.Success);
                navManager.NavigateTo("/sales/salesinvoicelist");
            }
        }
    }
    async Task ShowPaymentList(int salesMasterId)
    {
        isShowPayment = true;
        listPayment = _receiveCustomer.GetAllById(salesMasterId);
        StateHasChanged();
    }
    private void ClosePayment()
    {
        isPayment = false;
        master.LedgerId = 0;
        master.Date = DateTime.UtcNow;
        master.Amount = 0;
        master.Narration = string.Empty;
        PreviousDue = 0;
        StateHasChanged();
    }
    private void ClosePaymentList()
    {
        isShowPayment = false;
        StateHasChanged();
    }
    protected async Task GenerateExcel()
    {
        IWorkbook workbook = new XSSFWorkbook();
        var dataFormat = workbook.CreateDataFormat();
        var dataStyle = workbook.CreateCellStyle();
        dataStyle.DataFormat = dataFormat.GetFormat("MM/yy/dddd HH:mm:ss");
        ISheet worksheet = workbook.CreateSheet("Sheet1");



        int rowNumber1 = 0;
        IRow row1 = worksheet.CreateRow(rowNumber1++);
        //TbleHeder
        ICell cell1 = row1.CreateCell(3);
        cell1.SetCellValue("SalesInvoice");

        int rowNumber = 1;
        IRow row = worksheet.CreateRow(rowNumber++);
        //TbleHeder
        ICell cell = row.CreateCell(0);
        cell.SetCellValue("Voucher No");

        cell = row.CreateCell(1);
        cell.SetCellValue("Date");

        cell = row.CreateCell(2);
        cell.SetCellValue("Customer Name");

        cell = row.CreateCell(3);
        cell.SetCellValue("Voucher Type");

        cell = row.CreateCell(4);
        cell.SetCellValue("Amount");

        cell = row.CreateCell(5);
        cell.SetCellValue("Balance Due");

        cell = row.CreateCell(6);
        cell.SetCellValue("Status");


        //Tble Body
        foreach (var objDue in listModel)
    {
            row = worksheet.CreateRow(rowNumber++);

            cell = row.CreateCell(0);
            cell.SetCellValue(objDue.VoucherNo);

            cell = row.CreateCell(1);
            cell.SetCellValue(objDue.Date.ToString());

            cell = row.CreateCell(2);
            cell.SetCellValue(objDue.LedgerName);

            cell = row.CreateCell(3);
            cell.SetCellValue(objDue.VoucherTypeName);

            cell = row.CreateCell(4);
            cell.SetCellValue(objDue.GrandTotal.ToString());

            cell = row.CreateCell(5);
            cell.SetCellValue(objDue.BalanceDue.ToString());

            cell = row.CreateCell(6);
            cell.SetCellValue(objDue.Status.ToString());

        }
        MemoryStream ms = new MemoryStream();
        workbook.Write(ms);
        byte[] bytes = ms.ToArray();
        ms.Close();

        await JsRuntime.SaveAsFileAsync("SalesInvoice", bytes, "application/vnd.ms-excel");
    }
    private void GeneratePdf()
    {
        PdfSales pdfExp = new PdfSales();
        JsRuntime.InvokeAsync<SalesMasterView>(
            "saveAsFile",
            "SalesInvoice.pdf",
            Convert.ToBase64String(pdfExp.Report(listModel))
        );
    }
    private async void Search()
    {
        listModel = _salesInvoice.SaleReportsdetails(Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), CustomerId , WarehouseId , Status);
        StateHasChanged();
    }
    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;
    }
    void CloseDrawer()
    {
        open = false;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDialogService DialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVoucherType _voucherType { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWarehouse _warehouse { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAccountLedger _customer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IReceiveCustomer _receiveCustomer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISalesInvoice _salesInvoice { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRole _role { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<App> localizer { get; set; }
    }
}
#pragma warning restore 1591
