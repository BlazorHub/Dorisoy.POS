// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dreamer.Pages.Inventory.SalesInvoice
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Connection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Apimodel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Chart;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using MudBlazor.Dialog;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using NumericWordsConversion;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\SalesInvoice\SalesinvoiceEdit.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\SalesInvoice\SalesinvoiceEdit.razor"
using Dapper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\SalesInvoice\SalesinvoiceEdit.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\SalesInvoice\SalesinvoiceEdit.razor"
using Radzen;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/inventory/salesinvoiceedit/{id}")]
    public partial class SalesinvoiceEdit : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 465 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\SalesInvoice\SalesinvoiceEdit.razor"
       
    [Parameter]
    public string id { get; set; }
    SalesMaster mster = new SalesMaster();
    ProductView product = new ProductView();
    InventorySetting setting = new InventorySetting();
    List<ProductView> listProduct = new List<ProductView>();
    List<ProductView> listUnit = new List<ProductView>();
    List<SalesMan> listSalesMan = new List<SalesMan>();
    List<Batch> listBatch = new List<Batch>();
    List<Tax> listTax = new List<Tax>();
    List<AccountLedger> subledger = new List<AccountLedger>();
    //TodoTask
    List<ProductView> TodoList = new List<ProductView>();
    List<DeleteItem> deleteNo = new List<DeleteItem>();
    //GetSessionInfo
    long CompanyId;
    long RoleId;
    long FinancialYearId;
    long UserId;
    string Email;
    long decVouchertypeIdSalesInvoice = 19;
    long decVoucherReceiveId = 5;
    long editedID = 0;
    string strNepaliDate;
    string strDate;
    string strDueDateNepali;
    string strDueDateEng;
    string UnitId { get; set; }
    string BatchId { get; set; }
    string TaxId { get; set; }
    string strProductName = "";
    string strProductCode = "";
    string strUnitName = "";
    string strBatch = "";
    string strTaxName = "";
    Privilege privi = new Privilege();
    string strMenu = "SalesInvoice";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    protected async override void OnInitialized()
    {
        Email = await sessionStorage.GetItemAsync<string>("Email");
        CompanyId = await sessionStorage.GetItemAsync<long>("CompanyId");
        RoleId = await sessionStorage.GetItemAsync<long>("RoleId");
        FinancialYearId = await sessionStorage.GetItemAsync<long>("FinancialYearId");
        UserId = await sessionStorage.GetItemAsync<long>("UserId");
        //CheckPriviliage
        privi = priviliageRepository.PriviliageCheck(strMenu, RoleId, CompanyId);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Toaster.Add("You dont have to privilege.", MatToastType.Success, "dashboard", null);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        setting = settingRepository.EditInventorySetting(decVouchertypeIdSalesInvoice);
        mster = salesRepository.EditsalesMaster(Convert.ToInt64(id));
        TodoList = salesRepository.SalesInvoiceView(Convert.ToInt64(id));
        LoadData();
        StateHasChanged();
    }
    protected void LoadData()
    {
        subledger = salesRepository.GetAccountLedger(CompanyId);
        listSalesMan = salesRepository.GetSalesMan();
        listProduct = productrepository.ViewAllProduct(CompanyId);
        listTax = productrepository.GetTax();
        product.TaxId = 1;
        mster.CashId = 1;
        mster.BankId = 13;
    }
    void ModalShow()
    {

    }
    void ModalCancel()
    {
        product.ProductId = 0;
        product.Barcode = string.Empty;
        strProductCode = string.Empty;
        strProductName = string.Empty;
        strUnitName = string.Empty;
        strBatch = string.Empty;
        strTaxName = string.Empty;
        product.UnitId = 0;
        product.BatchId = 0;
        product.TaxId = 1;
        product.Qty = 0;
        product.Rate = 0;
        product.Discount = 0;
        product.DiscountAmount = 0;
        product.TaxRate = 0;
        product.TaxAmount = 0;
        product.NetAmount = 0;
        product.TotalAmount = 0;
    }
    protected void Save()
    {
        if (strEdit == true)
        {
            if (TodoList == null)
            {
                Toaster.Add("Invalid Entry.", MatToastType.Info, "SalesInvoice", null);
            }
            else if (mster.LedgerId == 0)
            {
                Toaster.Add("Choose Ledger", MatToastType.Info, "SalesInvoice", null);
            }
            else if (mster.VoucherNo == string.Empty)
            {
                Toaster.Add("Type Voucherno", MatToastType.Info, "SalesInvoice", null);
            }
            else if (mster.NepaliDate == string.Empty)
            {
                Toaster.Add("Invalid Date", MatToastType.Info, "SalesInvoice", null);
            }
            else if (mster.Date == null)
            {
                Toaster.Add("Invalid Date", MatToastType.Info, "SalesInvoice", null);
            }
            else if (mster.GrandTotal == 0)
            {
                Toaster.Add("Invalid Entry", MatToastType.Info, "SalesInvoice", null);
            }
            else
            {
                SqlConnection sqlcon = new SqlConnection(_conn.DbConn);
                sqlcon.Open();
                SqlTransaction sql = sqlcon.BeginTransaction();
                var para = new DynamicParameters();
                para.Add("@SalesMasterId", id);
                para.Add("@SerialNo", mster.SerialNo);
                para.Add("@VoucherNo", mster.VoucherNo);
                para.Add("@InvoiceNo", mster.VoucherNo);
                para.Add("@SuffixPrefixId", 0);
                para.Add("@Date", mster.Date);
                para.Add("@NepaliDate", mster.NepaliDate);
                para.Add("@LedgerId", mster.LedgerId);
                para.Add("@DueDate", mster.DueDate);
                para.Add("@DueDateNep", mster.DueDateNep);
                para.Add("@CreditPeriod", mster.CreditPeriod);
                para.Add("@ExchangeRateId", 1);
                para.Add("@POS", true);
                para.Add("@Narration", mster.Narration);
                para.Add("@SalesAccount", 10);
                para.Add("@SalesManId", mster.SalesManId);
                para.Add("@CounterId", 1);
                para.Add("@PricinglevelId", 1);
                para.Add("@DeliveryNoteMasterId", 0);
                para.Add("@OrderMasterId", 0);
                para.Add("@QuotationMasterId", 0);
                para.Add("@AdditionalCost", mster.AdditionalCost);
                para.Add("@CreditAmount", mster.CreditAmount);
                para.Add("@BankAmount", mster.BankAmount);
                para.Add("@CashAmount", mster.CashAmount);
                para.Add("@NetAmounts", mster.NetAmounts);
                para.Add("@TaxId", mster.TaxId);
                para.Add("@TaxRate", mster.TaxRate);
                para.Add("@TotalTax", mster.TotalTax);
                para.Add("@DisPer", mster.DisPer);
                para.Add("@BillDiscount", mster.BillDiscount);
                para.Add("@CheckDis", mster.CheckDis);
                para.Add("@GrandTotal", mster.GrandTotal);
                para.Add("@TotalAmount", mster.TotalAmount);
                para.Add("@PreviousDue", mster.PreviousDue);
                para.Add("@LrNo", mster.LrNo);
                para.Add("@TransportationCompany", mster.TransportationCompany);
                para.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                para.Add("@UserId", Email);
                para.Add("@FinancialYearId", FinancialYearId);
                para.Add("@CompanyId", CompanyId);
                para.Add("@ModifyDate", DateTime.Now);
                para.Add("@ModifyBy", UserId);
                sqlcon.Execute("SalesInvoiceUpdate", para, sql, 0, CommandType.StoredProcedure);
                foreach (var item in TodoList)
                {
                    if (item.SalesDetailsId == 0)
                    {
                        var paraOpening = new DynamicParameters();
                        paraOpening.Add("@SalesMasterId", id);
                        paraOpening.Add("@DeliveryNoteDetailsId", 0);
                        paraOpening.Add("@OrderDetailsId", 0);
                        paraOpening.Add("@QuotationDetailsId", 0);
                        paraOpening.Add("@ProductId", item.ProductId);
                        paraOpening.Add("@Qty", item.Qty);
                        paraOpening.Add("@Rate", item.Rate);
                        paraOpening.Add("@UnitId", item.UnitId);
                        paraOpening.Add("@UnitConversionId", 1);
                        paraOpening.Add("@Discount", item.Discount);
                        paraOpening.Add("@DiscountAmount", item.DiscountAmount);
                        paraOpening.Add("@TaxId", item.TaxId);
                        paraOpening.Add("@BatchId", item.BatchId);
                        paraOpening.Add("@GodownId", 1);
                        paraOpening.Add("@RackId", 1);
                        paraOpening.Add("@TaxAmount", item.TaxAmount);
                        paraOpening.Add("@GrossAmount", 0);
                        paraOpening.Add("@NetAmount", item.NetAmount);
                        paraOpening.Add("@Amount", item.TotalAmount);
                        paraOpening.Add("@SlNo", 0);
                        paraOpening.Add("@JourDId", dbType: DbType.Int64, direction: ParameterDirection.Output);
                        sqlcon.Execute("SalesDetailsInsert", paraOpening, sql, 0, CommandType.StoredProcedure);
                        long longdetailsId = paraOpening.Get<long>("JourDId");
                        //StockPosting
                        var parastock = new DynamicParameters();
                        parastock.Add("@BatchId", item.BatchId);
                        parastock.Add("@Date", mster.Date);
                        parastock.Add("@NepaliDate", mster.NepaliDate);
                        parastock.Add("@CompanyId", CompanyId);
                        parastock.Add("@FinancialYearId", FinancialYearId);
                        parastock.Add("@LedgerId", mster.LedgerId);
                        parastock.Add("@GodownId", 1);
                        parastock.Add("@InwardQty", 0);
                        parastock.Add("@OutwardQty", item.Qty);
                        parastock.Add("@ProductId", item.ProductId);
                        parastock.Add("@RackId", 1);
                        parastock.Add("@Rate", item.Rate);
                        parastock.Add("@UnitId", item.UnitId);
                        parastock.Add("@DetailsId", longdetailsId);
                        //if (item.OrderDetailsId != 0)
                        //{
                        parastock.Add("@InvoiceNo", mster.InvoiceNo);
                        parastock.Add("@VoucherNo", mster.VoucherNo);
                        parastock.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                        parastock.Add("@AgainstInvoiceNo", "NA");
                        parastock.Add("@AgainstVoucherNo", "NA");
                        parastock.Add("@AgainstVoucherTypeId", 0);
                        //}
                        //else if (item.ReceiptDetailsId != 0)
                        //{
                        //parastock.Add("@InvoiceNo", mster.InvoiceNo);
                        //parastock.Add("@VoucherNo", mster.VoucherNo);
                        //parastock.Add("@VoucherTypeId", 13);
                        //parastock.Add("@AgainstInvoiceNo", "NA");
                        //parastock.Add("@AgainstVoucherNo", "NA");
                        //parastock.Add("@AgainstVoucherTypeId", 0);
                        //}
                        //else if (item.OrderDetailsId == 0 && item.ReceiptDetailsId == 0)
                        //{
                        //parastock.Add("@InvoiceNo", mster.InvoiceNo);
                        //parastock.Add("@VoucherNo", mster.VoucherNo);
                        //parastock.Add("@VoucherTypeId", 13);
                        //parastock.Add("@AgainstInvoiceNo", "NA");
                        //parastock.Add("@AgainstVoucherNo", "NA");
                        //parastock.Add("@AgainstVoucherTypeId", 0);
                        //}
                        parastock.Add("@StockCalculate", "Sales");
                        parastock.Add("@AddedDate", DateTime.Now);
                        var valuesStock = sqlcon.Query<long>("StockPostingInsert", parastock, sql, true, 0, commandType: CommandType.StoredProcedure);
                    }
                    else
                    {
                        var paraOpening = new DynamicParameters();
                        paraOpening.Add("@SalesDetailsId", item.SalesDetailsId);
                        paraOpening.Add("@SalesMasterId", id);
                        paraOpening.Add("@DeliveryNoteDetailsId", 0);
                        paraOpening.Add("@OrderDetailsId", 0);
                        paraOpening.Add("@QuotationDetailsId", 0);
                        paraOpening.Add("@ProductId", item.ProductId);
                        paraOpening.Add("@Qty", item.Qty);
                        paraOpening.Add("@Rate", item.Rate);
                        paraOpening.Add("@UnitId", item.UnitId);
                        paraOpening.Add("@UnitConversionId", 1);
                        paraOpening.Add("@Discount", item.Discount);
                        paraOpening.Add("@DiscountAmount", item.DiscountAmount);
                        paraOpening.Add("@TaxId", item.TaxId);
                        paraOpening.Add("@BatchId", item.BatchId);
                        paraOpening.Add("@GodownId", 1);
                        paraOpening.Add("@RackId", 1);
                        paraOpening.Add("@TaxAmount", item.TaxAmount);
                        paraOpening.Add("@GrossAmount", 0);
                        paraOpening.Add("@NetAmount", item.NetAmount);
                        paraOpening.Add("@Amount", item.TotalAmount);
                        paraOpening.Add("@SlNo", 0);
                        sqlcon.Execute("SalesDetailsUpdate", paraOpening, sql, 0, CommandType.StoredProcedure);
                        //GetStockPostingId
                        var parameters = new DynamicParameters();
                        parameters.Add("@DetailsId", item.SalesDetailsId);
                        parameters.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                        var ListofPlan = sqlcon.Query<StockPosting>("SELECT StockPostingId FROM StockPosting where DetailsId=@DetailsId and VoucherTypeId=@VoucherTypeId", parameters, sql, true, 0, commandType: CommandType.Text).FirstOrDefault();
                        //StockPosting
                        var parastock = new DynamicParameters();
                        parastock.Add("@StockPostingId", ListofPlan.StockPostingId);
                        parastock.Add("@BatchId", item.BatchId);
                        parastock.Add("@Date", mster.Date);
                        parastock.Add("@NepaliDate", mster.NepaliDate);
                        parastock.Add("@CompanyId", CompanyId);
                        parastock.Add("@FinancialYearId", FinancialYearId);
                        parastock.Add("@LedgerId", mster.LedgerId);
                        parastock.Add("@GodownId", 1);
                        parastock.Add("@InwardQty", 0);
                        parastock.Add("@OutwardQty", item.Qty);
                        parastock.Add("@ProductId", item.ProductId);
                        parastock.Add("@RackId", 1);
                        parastock.Add("@Rate", item.Rate);
                        parastock.Add("@UnitId", item.UnitId);
                        parastock.Add("@DetailsId", item.SalesDetailsId);
                        //if (item.OrderDetailsId != 0)
                        //{
                        parastock.Add("@InvoiceNo", mster.InvoiceNo);
                        parastock.Add("@VoucherNo", mster.VoucherNo);
                        parastock.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                        parastock.Add("@AgainstInvoiceNo", "NA");
                        parastock.Add("@AgainstVoucherNo", "NA");
                        parastock.Add("@AgainstVoucherTypeId", 0);
                        //}
                        //else if (item.ReceiptDetailsId != 0)
                        //{
                        //parastock.Add("@InvoiceNo", mster.InvoiceNo);
                        //parastock.Add("@VoucherNo", mster.VoucherNo);
                        //parastock.Add("@VoucherTypeId", 13);
                        //parastock.Add("@AgainstInvoiceNo", "NA");
                        //parastock.Add("@AgainstVoucherNo", "NA");
                        //parastock.Add("@AgainstVoucherTypeId", 0);
                        //}
                        //else if (item.OrderDetailsId == 0 && item.ReceiptDetailsId == 0)
                        //{
                        //parastock.Add("@InvoiceNo", mster.InvoiceNo);
                        //parastock.Add("@VoucherNo", mster.VoucherNo);
                        //parastock.Add("@VoucherTypeId", 13);
                        //parastock.Add("@AgainstInvoiceNo", "NA");
                        //parastock.Add("@AgainstVoucherNo", "NA");
                        //parastock.Add("@AgainstVoucherTypeId", 0);
                        //}
                        parastock.Add("@StockCalculate", "Sales");
                        parastock.Add("@ModifyDate", DateTime.Now);
                        var valuesStock = sqlcon.Query<long>("StockPostingUpdate", parastock, sql, true, 0, commandType: CommandType.StoredProcedure);
                    }
                }
                //LedgerPosting

                //DeleteCustomer
                var paraScDelete = new DynamicParameters();
                paraScDelete.Add("@DetailsId", mster.SalesMasterId);
                paraScDelete.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                var valueScDelete = sqlcon.Query<long>("DELETE FROM LedgerPosting where DetailsId=@DetailsId AND VoucherTypeId=@VoucherTypeId", paraScDelete, sql, true, 0, commandType: CommandType.Text);

                var paraSc = new DynamicParameters();
                paraSc.Add("@Date", mster.Date);
                paraSc.Add("@NepaliDate", mster.NepaliDate);
                paraSc.Add("@LedgerId", mster.LedgerId);
                paraSc.Add("@Debit", mster.GrandTotal);
                paraSc.Add("@Credit", 0);
                paraSc.Add("@VoucherNo", mster.VoucherNo);
                paraSc.Add("@DetailsId", mster.SalesMasterId);
                paraSc.Add("@YearId", FinancialYearId);
                paraSc.Add("@InvoiceNo", string.Empty);
                paraSc.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                paraSc.Add("@CompanyId", CompanyId);
                paraSc.Add("@LongReference", mster.Narration);
                paraSc.Add("@ReferenceN", mster.Narration);
                paraSc.Add("@ChequeNo", string.Empty);
                paraSc.Add("@ChequeDate", string.Empty);
                paraSc.Add("@AddedDate", DateTime.Now);
                var valueSc = sqlcon.Query<long>("LedgerPostingInsert", paraSc, sql, true, 0, commandType: CommandType.StoredProcedure);

                //SalesAccount
                decimal decSupplierCustomerAmount = Math.Round(mster.NetAmounts - mster.BillDiscount, 2);

                var paraPs = new DynamicParameters();
                paraPs.Add("@Date", mster.Date);
                paraPs.Add("@NepaliDate", mster.NepaliDate);
                paraPs.Add("@LedgerId", 10);
                paraPs.Add("@Debit", 0);
                paraPs.Add("@Credit", decSupplierCustomerAmount);
                paraPs.Add("@VoucherNo", mster.VoucherNo);
                paraPs.Add("@DetailsId", mster.SalesMasterId);
                paraPs.Add("@YearId", FinancialYearId);
                paraPs.Add("@InvoiceNo", string.Empty);
                paraPs.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                paraPs.Add("@CompanyId", CompanyId);
                paraPs.Add("@LongReference", mster.Narration);
                paraPs.Add("@ReferenceN", mster.Narration);
                paraPs.Add("@ChequeNo", string.Empty);
                paraPs.Add("@ChequeDate", string.Empty);
                paraPs.Add("@AddedDate", DateTime.Now);
                var valuePs = sqlcon.Query<long>("LedgerPostingInsert", paraPs, sql, true, 0, commandType: CommandType.StoredProcedure);

                //Tax
                if (mster.TotalTax > 0)
                {
                    var paraTax = new DynamicParameters();
                    paraTax.Add("@Date", mster.Date);
                    paraTax.Add("@NepaliDate", mster.NepaliDate);
                    paraTax.Add("@LedgerId", 14);
                    paraTax.Add("@Debit", 0);
                    paraTax.Add("@Credit", mster.TotalTax);
                    paraTax.Add("@VoucherNo", mster.VoucherNo);
                    paraTax.Add("@DetailsId", mster.SalesMasterId);
                    paraTax.Add("@YearId", FinancialYearId);
                    paraTax.Add("@InvoiceNo", string.Empty);
                    paraTax.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                    paraTax.Add("@CompanyId", CompanyId);
                    paraTax.Add("@LongReference", mster.Narration);
                    paraTax.Add("@ReferenceN", mster.Narration);
                    paraTax.Add("@ChequeNo", string.Empty);
                    paraTax.Add("@ChequeDate", string.Empty);
                    paraTax.Add("@AddedDate", DateTime.Now);
                    var valueTax = sqlcon.Query<long>("LedgerPostingInsert", paraTax, sql, true, 0, commandType: CommandType.StoredProcedure);
                }
                ////Discount
                //if (mster.BillDiscount > 0)
                //{
                //    var paraDiscount = new DynamicParameters();
                //    paraDiscount.Add("@Date", mster.Date);
                //    paraDiscount.Add("@NepaliDate", mster.NepaliDate);
                //    paraDiscount.Add("@LedgerId", 8);
                //    paraDiscount.Add("@Debit", mster.BillDiscount);
                //    paraDiscount.Add("@Credit", 0);
                //    paraDiscount.Add("@VoucherNo", mster.VoucherNo);
                //    paraDiscount.Add("@DetailsId", mster.SalesMasterId);
                //    paraDiscount.Add("@YearId", FinancialYearId);
                //    paraDiscount.Add("@InvoiceNo", string.Empty);
                //    paraDiscount.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                //    paraDiscount.Add("@CompanyId", CompanyId);
                //    paraDiscount.Add("@LongReference", mster.Narration);
                //    paraDiscount.Add("@ReferenceN", mster.Narration);
                //    paraDiscount.Add("@ChequeNo", string.Empty);
                //    paraDiscount.Add("@ChequeDate", string.Empty);
                //    paraDiscount.Add("@AddedDate", DateTime.Now);
                //    var valueDiscount = sqlcon.Query<long>("LedgerPostingInsert", paraDiscount, sql, true, 0, commandType: CommandType.StoredProcedure);
                //}

                //Delete
                foreach (var item in deleteNo)
                {
                    var paraDetailsDelete = new DynamicParameters();
                    paraDetailsDelete.Add("@SalesDetailsId", item.DeleteItemId);
                    var value = sqlcon.Query<long>("DELETE FROM SalesDetails where SalesDetailsId=@SalesDetailsId", paraDetailsDelete, sql, true, 0, commandType: CommandType.Text);
                }
                foreach (var item in deleteNo)
                {
                    var parPartyBalanceId = new DynamicParameters();
                    parPartyBalanceId.Add("@DetailsId", item.DeleteItemId);
                    parPartyBalanceId.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                    var returPartyBalanceId = sqlcon.Query<StockPosting>("SELECT StockPostingId FROM StockPosting where DetailsId=@DetailsId and VoucherTypeId=@VoucherTypeId", parPartyBalanceId, sql, true, 0, commandType: CommandType.Text).FirstOrDefault();
                    var paraDetailsDelete = new DynamicParameters();
                    paraDetailsDelete.Add("@StockPostingId", returPartyBalanceId.StockPostingId);
                    var value = sqlcon.Query<long>("DELETE FROM StockPosting where StockPostingId=@StockPostingId", paraDetailsDelete, sql, true, 0, commandType: CommandType.Text);
                }
                sql.Commit();
                Toaster.Add("Saved Successfully", MatToastType.Info, "SalesInvoice", null);
                //LoadData();
                //JsRuntime.InvokeAsync<object>("open", new object[] { ($"/inventory/salesinvoiceprint/{id}"), "_blank" });
                navManager.NavigateTo($"/inventory/salesinvoicedetails/{id}");
                //navManager.NavigateTo("inventory/salesinvoicelist");
            }
        }
        else
        {
            Toaster.Add("You dont have to privilege.", MatToastType.Success, "dashboard", null);
            navManager.NavigateTo("dashboard");
        }
    }
    protected void LedgerClicked()
    {
        if (mster.LedgerId > 0)
        {
            var view = purchaseRepository.GetPreviousDuesBalanceSales(mster.LedgerId);
            mster.PreviousDue = view.DueBalance;
        }
        else
        {
            mster.PreviousDue = 0;
        }
    }
    protected void ProductClicked()
    {
        if (product.ProductId > 0)
        {
            var viewRate = purchaseRepository.GetProductRte(product.ProductId);
            product.Barcode = viewRate.Barcode;
            product.Rate = viewRate.SalesRate;
            strUnitName = viewRate.UnitName;
            product.UnitId = viewRate.UnitId;
            listUnit = purchaseRepository.GetProducttounit(product.ProductId);
            var varBatch = purchaseRepository.GetBatchView(product.ProductId);
            strBatch = varBatch.BatchNo;
            product.BatchId = varBatch.BatchId;
            listBatch = purchaseRepository.GetProducttoBatch(product.ProductId);
            strProductName = listProduct.FirstOrDefault(s => s.ProductId == product.ProductId).ProductName;
            if (product.Qty > 0)
            {
                Calculate();
            }
        }
        else
        {
            product.UnitId = 0;
            product.SalesRate = 0;
            product.Qty = 0;
            product.Barcode = string.Empty;
            product.Rate = 0;
            product.TaxRate = 0;
            product.TaxAmount = 0;
            product.TaxId = 1;
            product.NetAmount = 0;
            product.TotalAmount = 0;
        }

        this.StateHasChanged();
    }
    protected void BarcodeClicked()
    {
        if (product.Barcode != string.Empty)
        {
            var viewRate = purchaseRepository.GetProductBatcode(product.Barcode);
            if (viewRate != null)
            {
                product.ProductId = viewRate.ProductId;
                product.Barcode = viewRate.Barcode;
                product.Rate = viewRate.SalesRate;
                strUnitName = viewRate.UnitName;
                product.UnitId = viewRate.UnitId;
                listUnit = purchaseRepository.GetProducttounit(viewRate.ProductId);
                var varBatch = purchaseRepository.GetBatchView(viewRate.ProductId);
                strBatch = varBatch.BatchNo;
                product.BatchId = varBatch.BatchId;
                listBatch = purchaseRepository.GetProducttoBatch(viewRate.ProductId);
                strProductName = listProduct.FirstOrDefault(s => s.ProductId == viewRate.ProductId).ProductName;
            }
            else
            {
                product.ProductId = 0;
                product.UnitId = 0;
                product.PurchaseRate = 0;
                product.SalesRate = 0;
                product.Qty = 0;
                product.Barcode = string.Empty;
                product.Rate = 0;
                product.TaxRate = 0;
                product.TaxAmount = 0;
                product.TaxId = 1;
                product.NetAmount = 0;
                product.TotalAmount = 0;
            }
        }
        else
        {
            product.UnitId = 0;
            product.PurchaseRate = 0;
            product.SalesRate = 0;
            product.Qty = 0;
            product.Barcode = string.Empty;
            product.Rate = 0;
            product.TaxRate = 0;
            product.TaxAmount = 0;
            product.TaxId = 1;
            product.NetAmount = 0;
            product.TotalAmount = 0;
        }

        this.StateHasChanged();
    }
    protected void UnitClicked()
    {
        if (product.UnitId > 0)
        {
            strUnitName = listUnit.FirstOrDefault(s => s.UnitId == product.UnitId).UnitName;
        }
    }
    protected void BatchClicked()
    {
        if (product.BatchId > 0)
        {

            strBatch = listBatch.FirstOrDefault(s => s.BatchId == product.BatchId).BatchNo;
            if (strBatch == "NA")
            {

            }
            else
            {
                DateTime dtcurrentDate = Convert.ToDateTime(mster.Date);
                decimal decRate = purchaseRepository.SalesInvoiceBatchRateForSales(product.ProductId, dtcurrentDate, product.BatchId);
                if (decRate > 0)
                {
                    product.Rate = decRate;
                }
                Calculate();
            }
        }
        else
        {
            if (product.ProductId > 0)
            {

            }
        }
    }
    protected void TaxClicked()
    {
        if (product.TaxId > 0)
        {
            var taxRate = purchaseRepository.GetTaRate(product.TaxId);
            product.TaxRate = taxRate.Rate;
            strTaxName = listTax.FirstOrDefault(s => s.TaxId == product.TaxId).TaxName;
        }
        else
        {
            product.TaxRate = 0;
        }
        Calculate();
        this.StateHasChanged();
    }
    protected void VatClicked()
    {
        if (mster.TaxId > 0)
        {
            var taxRate = purchaseRepository.GetTaRate(mster.TaxId);
            mster.TaxRate = taxRate.Rate;
            CalculateTotal();
        }
        else
        {
            mster.TaxRate = 0;
        }
        this.StateHasChanged();
    }
    void Calculate()
    {
        decimal decGrossValue = 0;
        decimal decPercentgeDiscount = 0;
        decimal decTtlDiscount = 0;
        decimal decNetValue = 0;
        decimal decTaxAmount = 0;
        decimal decTotalTax = 0;
        decimal decGrndTotl = 0;
        if (product.Qty > 0 && product.Rate > 0)
        {
            decGrossValue = product.Rate * product.Qty;

            decPercentgeDiscount = product.DiscountAmount * 100 / decGrossValue;
            decTtlDiscount = decPercentgeDiscount;
            product.Discount = decTtlDiscount;

            decNetValue = decGrossValue - product.DiscountAmount;

            //ClculteT
            decTaxAmount = decNetValue * product.TaxRate / 100;
            product.TaxAmount = Math.Round(decTaxAmount, PublicVariables._inNoOfDecimalPlaces);


            decGrndTotl = decNetValue;
            mster.TotalTax = decTotalTax;
            product.NetAmount = decNetValue;
            product.TotalAmount = decGrndTotl;
        }
        else
        {
            product.Discount = 0;
        }
    }
    void ModalOk()
    {
        if (product.ProductId == 0)
        {
            Toaster.Add("Please select Product", MatToastType.Warning, "Product", null);
            return;
        }
        else if (product.UnitId == 0)
        {
            Toaster.Add("Please Select Unit", MatToastType.Warning, "Product", null);
            return;
        }
        else if (mster.NepaliDate == string.Empty)
        {
            Toaster.Add("Invalid Date", MatToastType.Info, "Product", null);
            return;
        }
        else if (mster.Date == null)
        {
            Toaster.Add("Invalid Date", MatToastType.Info, "Product", null);
            return;
        }
        else if (product.Qty == 0)
        {
            Toaster.Add("Please Enter Qty", MatToastType.Warning, "Product", null);
            return;
        }

        if (editedID == 0)
        {
            Calculate();
            var myTodoItem = new ProductView()
            {
                Id = TodoList.Count() + 1,
                SalesDetailsId = 0,
                ProductId = product.ProductId,
                Barcode = product.Barcode,
                UnitId = product.UnitId,
                Qty = product.Qty,
                Rate = product.Rate,
                BatchId = product.BatchId,
                Discount = product.Discount,
                DiscountAmount = product.DiscountAmount,
                TaxId = product.TaxId,
                TaxRate = product.TaxRate,
                TaxAmount = product.TaxAmount,
                NetAmount = product.NetAmount,
                TotalAmount = product.TotalAmount,
                ProductName = strProductName,
                UnitName = strUnitName,
                TaxName = strTaxName,
                BatchNo = strBatch,
                ReceiptDetailsId = 0,
                OrderDetailsId = 0

            };
            TodoList.Add(myTodoItem);
            //CalculateTotal
            CalculateTotal();
            product.ProductId = 0;
            product.Barcode = string.Empty;
            strProductCode = string.Empty;
            strProductName = string.Empty;
            strUnitName = string.Empty;
            strBatch = string.Empty;
            strTaxName = string.Empty;
            product.UnitId = 0;
            product.BatchId = 0;
            product.TaxId = 1;
            product.Qty = 0;
            product.Rate = 0;
            product.Discount = 0;
            product.DiscountAmount = 0;
            product.TaxRate = 0;
            product.TaxAmount = 0;
            product.NetAmount = 0;
            product.TotalAmount = 0;
            Toaster.Add("New added.", MatToastType.Info, "List", null);
        }
        else
        {
            var myTodo = TodoList.FirstOrDefault(x => x.SalesDetailsId == editedID);
            myTodo.ProductId = product.ProductId;
            myTodo.UnitId = product.UnitId;
            myTodo.BatchId = product.BatchId;
            myTodo.TaxId = product.TaxId;
            myTodo.Qty = product.Qty;
            myTodo.Rate = product.Rate;
            myTodo.Discount = product.Discount;
            myTodo.DiscountAmount = product.DiscountAmount;
            myTodo.TaxRate = product.TaxRate;
            myTodo.TaxAmount = product.TaxAmount;
            myTodo.NetAmount = product.NetAmount;
            myTodo.TotalAmount = product.TotalAmount;

            product.ProductId = 0;
            product.Barcode = string.Empty;
            strProductCode = string.Empty;
            strProductName = string.Empty;
            strUnitName = string.Empty;
            strBatch = string.Empty;
            strTaxName = string.Empty;
            product.UnitId = 0;
            product.BatchId = 0;
            product.TaxId = 1;
            product.Qty = 0;
            product.Rate = 0;
            product.Discount = 0;
            product.DiscountAmount = 0;
            product.TaxRate = 0;
            product.TaxAmount = 0;
            product.NetAmount = 0;
            product.TotalAmount = 0;
            Toaster.Add("edit finished.", MatToastType.Info, "List", null);
            editedID = 0;
        }
    }
    void CalculateTotal()
    {
        decimal decTotalAmount = 0;
        decimal decAdditionalCost = 0;
        decimal decTaxAmount = 0;
        decimal decTotalDisTax = 0;
        decimal decGrandTotalCshbnk = 0;
        decimal decNetAmount = 0;
        decimal decCheckTax = 0;
        decimal decGrandTotal = 0;
        foreach (var todo in TodoList)
        {
            decTotalAmount = decTotalAmount + todo.TotalAmount;
            decNetAmount = decNetAmount + todo.NetAmount;
            decCheckTax = decCheckTax + todo.TaxAmount;
        }
        mster.NetAmounts = Math.Round(decNetAmount, PublicVariables._inNoOfDecimalPlaces);
        mster.TotalAmount = Math.Round(decTotalAmount, PublicVariables._inNoOfDecimalPlaces);
        decimal decTotalAmountTax = 0;
        decTotalAmountTax = decTotalAmount + mster.TotalTax;
        if (mster.CheckDis == "p")
        {

            mster.BillDiscount = decTotalAmountTax * mster.DisPer / 100;
            decTotalDisTax = decTotalAmount;
        }
        else
        {
            decTotalDisTax = decTotalAmount;
            mster.DisPer = (mster.BillDiscount * 100) / (decTotalAmountTax);
        }
        if (decCheckTax > 0)
        {
            decTaxAmount = Math.Round(decCheckTax, PublicVariables._inNoOfDecimalPlaces);
            mster.TotalTax = Math.Round(decCheckTax, PublicVariables._inNoOfDecimalPlaces);
        }
        else
        {
            decTaxAmount = decTotalDisTax * mster.TaxRate / 100;
            mster.TotalTax = Math.Round(decTaxAmount, PublicVariables._inNoOfDecimalPlaces);
        }
        decimal decDiscountAmount = 0;
        decDiscountAmount = mster.BillDiscount;
        decGrandTotal = Math.Round((decTotalDisTax + decAdditionalCost + decTaxAmount) - (decDiscountAmount), PublicVariables._inNoOfDecimalPlaces);
        if (decGrandTotal >= 0)
        {
            mster.GrandTotal = decGrandTotal;
        }
        else
        {
            mster.BillDiscount = 0;
            mster.GrandTotal = decGrandTotal;
        }
        decGrandTotalCshbnk = mster.CashAmount + mster.BankAmount;
        if (mster.GrandTotal >= decGrandTotalCshbnk)
        {
            var decTotl = mster.GrandTotal - decGrandTotalCshbnk;
            mster.CreditAmount = Math.Round(decTotl, PublicVariables._inNoOfDecimalPlaces);
        }
        else
        {
            mster.CreditAmount = 0;
            mster.CashAmount = 0;
            mster.BankAmount = 0;
        }
    }
    void deleteItem(long id)
    {
        var myTodo = TodoList.FirstOrDefault(x => x.SalesDetailsId == id);
        TodoList.Remove(myTodo);

        //HoldId
        var myHoldId = new DeleteItem()
        {
            DeleteItemId = myTodo.SalesDetailsId,
        };
        deleteNo.Add(myHoldId);
        product.ProductId = 0;
        product.Barcode = string.Empty;
        strProductCode = string.Empty;
        strProductName = string.Empty;
        strUnitName = string.Empty;
        strBatch = string.Empty;
        strTaxName = string.Empty;
        product.UnitId = 0;
        product.BatchId = 0;
        product.TaxId = 1;
        product.Qty = 0;
        product.Rate = 0;
        product.Discount = 0;
        product.DiscountAmount = 0;
        product.TaxRate = 0;
        product.TaxAmount = 0;
        product.NetAmount = 0;
        product.TotalAmount = 0;
        editedID = 0;
        Toaster.Add("Todo removed.", MatToastType.Info, "List", null);
    }

    void editItem(long id)
    {
        ModalShow();
        var myTodo = TodoList.FirstOrDefault(x => x.SalesDetailsId == id);
        product.ProductId = myTodo.ProductId;
        product.Barcode = myTodo.Barcode;
        product.ProductName = myTodo.ProductName;
        ProductClicked();
        product.UnitId = myTodo.UnitId;
        product.UnitName = myTodo.UnitName;
        product.BatchId = myTodo.BatchId;
        product.BatchNo = myTodo.BatchNo;
        BatchClicked();
        product.TaxId = myTodo.TaxId;
        product.TaxName = myTodo.TaxName;
        TaxClicked();
        product.Qty = myTodo.Qty;
        product.Rate = myTodo.Rate;
        product.Discount = myTodo.Discount;
        product.DiscountAmount = myTodo.DiscountAmount;
        product.NetAmount = myTodo.NetAmount;
        product.TaxRate = myTodo.TaxRate;
        product.TaxAmount = myTodo.TaxAmount;
        product.TotalAmount = myTodo.TotalAmount;
        editedID = id;
    }
    private async Task ChangeFrom()
    {
        try
        {
            strNepaliDate = mster.NepaliDate;

            if (strNepaliDate == string.Empty)
            {
                strNepaliDate = DreamerDateConveter.convertToBS(DateTime.Now);
                mster.NepaliDate = strNepaliDate;
                strDate = DreamerDateConveter.convertToAD(strNepaliDate).ToShortDateString();
                mster.Date = Convert.ToDateTime(strDate);
            }
            else
            {
                strDate = DreamerDateConveter.convertToAD(strNepaliDate).ToShortDateString();
                mster.Date = Convert.ToDateTime(strDate);
            }
        }
        catch (Exception ex)
        {
            if (strDate == string.Empty)
            {
                Toaster.Add("Invalid From Date", MatToastType.Info, "Invalid", null);
            }
            mster.Date = (DateTime?)null;
        }
    }
    private async Task ChangeTo()
    {
        try
        {
            string strDuedateNep = mster.DueDateNep;
            string strDueDate;
            if (strDuedateNep == string.Empty)
            {
                strDuedateNep = DreamerDateConveter.convertToBS(DateTime.Now);
                strDueDate = DreamerDateConveter.convertToAD(strDuedateNep).ToShortDateString();
                mster.DueDate = Convert.ToDateTime(strDueDate);
            }
            else
            {
                strDueDate = DreamerDateConveter.convertToAD(strDuedateNep).ToShortDateString();
                mster.DueDate = Convert.ToDateTime(strDueDate);
            }
        }
        catch (Exception ex)
        {
            if (strDate == string.Empty)
            {
                Toaster.Add("Invalid From Date", MatToastType.Info, "Invalid", null);
            }
        }
    }
    void Cancel()
    {
        navManager.NavigateTo("inventory/salesinvoicelist");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster Toaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PriviliageRepository priviliageRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SalesInvoiceRepository salesRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PurchaseInvoiceRepository purchaseRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TapSizeRepository settingRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProductRepository productrepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AccountgroupRepository groupRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DatabaseConnection _conn { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<App> localizer { get; set; }
    }
}
#pragma warning restore 1591
