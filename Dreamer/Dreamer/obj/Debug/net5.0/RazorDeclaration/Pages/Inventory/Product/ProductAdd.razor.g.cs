// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dreamer.Pages.Inventory.Product
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Connection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Apimodel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Chart;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using MudBlazor.Dialog;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using NumericWordsConversion;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\Product\ProductAdd.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\Product\ProductAdd.razor"
using Dapper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\Product\ProductAdd.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\Product\ProductAdd.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/inventory/productadd")]
    public partial class ProductAdd : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 345 "D:\CodecanonProject\Dotnet5\InventoryPos\Dreamer\Dreamer\Pages\Inventory\Product\ProductAdd.razor"
       
    InventorySetting setting = new InventorySetting();
    Product product = new Product();
    ProductView productOpening = new ProductView();
    UnitConvertion convertion = new UnitConvertion();
    List<ProductGroupView> listgroup = new List<ProductGroupView>();
    List<ProductView> listUnit = new List<ProductView>();
    List<ProductView> TodoList = new List<ProductView>();
    List<ProductView> TodoListCon = new List<ProductView>();
    List<ProductCategory> listCategory = new List<ProductCategory>();
    List<Tax> listTax = new List<Tax>();
    //GetSessionInfo
    long CompanyId;
    long RoleId;
    long FinancialYearId;
    long UserId;
    string Email;
    public byte[] ImageUploaded { get; set; }
    //List<DeleteItem> deleteNo = new List<DeleteItem>();
    //List<DeleteItem> deleteNoConvertion = new List<DeleteItem>();
    long decSettingVoucherId = 30;
    string strSerialNo = string.Empty;
    long editedID = 0;
    long editedIDCon = 0;
    string strUnitName = string.Empty;
    string strUnitNameCon = string.Empty;
    Privilege privi = new Privilege();
    string strMenu = "Product";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    protected async override void OnInitialized()
    {
        Email = await sessionStorage.GetItemAsync<string>("Email");
        CompanyId = await sessionStorage.GetItemAsync<long>("CompanyId");
        RoleId = await sessionStorage.GetItemAsync<long>("RoleId");
        FinancialYearId = await sessionStorage.GetItemAsync<long>("FinancialYearId");
        UserId = await sessionStorage.GetItemAsync<long>("UserId");
        //CheckPriviliage
        privi = priviliageRepository.PriviliageCheck(strMenu, RoleId, CompanyId);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Snackbar.Add("You dont have to privilege.", Severity.Error);
                //Toaster.Add("You dont have to privilege.", MatToastType.Success, "dashboard", null);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        LoadData();
        StateHasChanged();
    }
    private void LoadData()
    {
        setting = settingRepository.EditInventorySetting(decSettingVoucherId);
        AutoGenerateNo();
        listgroup = productgroupRepository.ViewAllProductGroup();
        listUnit = productRepository.GetUnit();
        listCategory = productgroupRepository.GetCategory();
        product.ProcategoryId = 1;
        listTax = productRepository.GetTax();
        product.TaxId = 1;
        product.ProductName = string.Empty;
        product.IsActive = true;
        product.IsallowBatch = true;
        GetDefaultImage();
    }
    public void AutoGenerateNo()
    {
        if (setting.AutomaticproductCode == true)
        {
            strSerialNo = productRepository.GetProductCodeSerial(CompanyId);
            product.ProductCode = strSerialNo;
        }
        else
        {
            strSerialNo = string.Empty;
            product.ProductCode = string.Empty;
        }
    }
    public void GetDefaultImage() //This function is used to pass the default image when there is no image for saving.
    {
        // To get deafult image this function is used
        // As we store default image in start up path,  we assign the file path as its path
        string strImagePath = Path.Combine(Environment.CurrentDirectory, @"logo\\logo.png");
        ImageUploaded = readfile(strImagePath);
        MemoryStream ms = new MemoryStream(ImageUploaded);
        //Image newImage = Image.FromStream(ms);
        //pbxCompnayLogo.Image = newImage;
        //pbxCompnayLogo.SizeMode = PictureBoxSizeMode.StretchImage;

    }
    byte[] readfile(string strimagepath)
    {
        System.IO.FileInfo flinfo = new System.IO.FileInfo(strimagepath);
        long numbytes = flinfo.Length;
        FileStream fstream = new FileStream(strimagepath, FileMode.Open, FileAccess.Read);
        BinaryReader br = new BinaryReader(fstream);
        ImageUploaded = br.ReadBytes((int)numbytes);
        return ImageUploaded;
    }
    public void SaveProduct()
    {
        if (strAdd == true)
        {
            if (product.ProductCode == string.Empty)
            {
                Snackbar.Add("Type Product Code.", Severity.Info);
            }
            else if (product.ProductName == string.Empty)
            {
                Snackbar.Add("Type Product Name.", Severity.Info);
            }
            else if (product.GroupId == 0)
            {
                Snackbar.Add("Choose Product Group.", Severity.Info);
            }
            else if (product.UnitId == 0)
            {
                Snackbar.Add("Choose Unit.", Severity.Info);
            }
            else if (product.MinimumStock > product.MaximumStock)
            {
                Snackbar.Add("MinimumStock cannot be greater then minimumstock.", Severity.Info);
            }
            else
            {
                var strVoucherNo = false;
                strVoucherNo = productRepository.CheckProductCode(product.ProductCode, CompanyId);
                if (strVoucherNo == false)
                {
                    var strProductName = false;
                    strProductName = productRepository.CheckProductName(product.ProductName, CompanyId);
                    if (strProductName == false)
                    {
                        SqlConnection sqlcon = new SqlConnection(_conn.DbConn);
                        sqlcon.Open();
                        SqlTransaction sql = sqlcon.BeginTransaction();
                        if (ImageUploaded != null)
                        {
                            product.LogoPath = ImageUploaded;
                            ImageUploaded = null;
                        }
                        var para = new DynamicParameters();
                        para.Add("@ProductCode", product.ProductCode);
                        para.Add("@Sno", strSerialNo);
                        para.Add("@ProductName", product.ProductName);
                        para.Add("@PartNo", product.PartNo);
                        para.Add("@GroupId", product.GroupId);
                        para.Add("@BrandId", product.BrandId);
                        para.Add("@TaxId", product.TaxId);
                        para.Add("@ProcategoryId", product.ProcategoryId);
                        para.Add("@UnitId", product.UnitId);
                        para.Add("@SizeId", product.SizeId);
                        para.Add("@ModelNoId", product.ModelNoId);
                        para.Add("@PurchaseRate", product.PurchaseRate);
                        para.Add("@SalesRate", product.SalesRate);
                        para.Add("@Mrp", product.Mrp);
                        para.Add("@MinimumStock", product.MinimumStock);
                        para.Add("@MaximumStock", product.MaximumStock);
                        para.Add("@ReorderLevel", product.ReorderLevel);
                        para.Add("@GodownId", 1);
                        para.Add("@RackId", 1);
                        para.Add("@IsallowBatch", product.IsallowBatch);
                        para.Add("@Ismultipleunit", true);
                        para.Add("@Isopeningstock", true);
                        para.Add("@Narration", product.Narration);
                        para.Add("@IsActive", product.IsActive);
                        para.Add("@LogoPath", product.LogoPath);
                        para.Add("@CompanyId", CompanyId);
                        para.Add("@AddedUserId", UserId);
                        para.Add("@AddedDate", DateTime.Now);
                        para.Add("@MemIDOUT", dbType: DbType.Int64, direction: ParameterDirection.Output);
                        sqlcon.Execute("ProductAdd", para, sql, 0, CommandType.StoredProcedure);
                        long MemID = para.Get<long>("MemIDOUT");

                        //MultiConversation
                        var paraConmulti = new DynamicParameters();
                        paraConmulti.Add("@ProductId", MemID);
                        paraConmulti.Add("@UnitId", product.UnitId);
                        paraConmulti.Add("@Quantities", 0);
                        paraConmulti.Add("@ConversionRate", 1);
                        paraConmulti.Add("@CompanyId", CompanyId);
                        paraConmulti.Add("@AddedDate", DateTime.Now);
                        var valuesparaConmulti = sqlcon.Query<long>("INSERT INTO UnitConvertion(ProductId,UnitId,Quantities,ConversionRate,CompanyId,AddedDate)VALUES(@ProductId,@UnitId,@Quantities,@ConversionRate,@CompanyId,@AddedDate)", paraConmulti, sql, true, 0, commandType: CommandType.Text);

                        //Batch
                        Batch infoBatch = new Batch();
                        var paraBatch = new DynamicParameters();
                        paraBatch.Add("@BatchNo", "NA");
                        paraBatch.Add("@PartNo", product.PartNo);
                        paraBatch.Add("@Barcode", product.PartNo);
                        paraBatch.Add("@Rate", product.SalesRate);
                        paraBatch.Add("@PurchaseRate", product.PurchaseRate);
                        paraBatch.Add("@Mrp", product.Mrp);
                        paraBatch.Add("@ProductId", MemID);
                        paraBatch.Add("@ManufacturingDate", DateTime.Now);
                        paraBatch.Add("@ExpiryDate", DateTime.Now);
                        string strManu = DreamerDateConveter.convertToBS(DateTime.Now);
                        string strExp = DreamerDateConveter.convertToBS(DateTime.Now);
                        paraBatch.Add("@ManufacturingNepali", strManu);
                        paraBatch.Add("@ExpiryNepali", strExp);
                        paraBatch.Add("@CompanyId", CompanyId);
                        paraBatch.Add("@Narration", string.Empty);

                        paraBatch.Add("@AddedDate", DateTime.Now);
                        paraBatch.Add("@BatchIdout", dbType: DbType.Int64, direction: ParameterDirection.Output);
                        sqlcon.Execute("BatchAdd", paraBatch, sql, 0, CommandType.StoredProcedure);
                        long returnBatchId = paraBatch.Get<long>("BatchIdout");
                        if (MemID > 0)
                        {
                            //InsertStockAndUnitConversion
                            foreach (var item in TodoListCon)
                            {

                                var paraCon = new DynamicParameters();
                                paraCon.Add("@ProductId", MemID);
                                paraCon.Add("@UnitId", item.UnitId);
                                paraCon.Add("@Quantities", item.Qty);
                                paraCon.Add("@ConversionRate", item.Rate);
                                paraCon.Add("@CompanyId", CompanyId);
                                paraCon.Add("@AddedDate", DateTime.Now);
                                var valuesparaCon = sqlcon.Query<long>("INSERT INTO UnitConvertion(ProductId,UnitId,Quantities,ConversionRate,CompanyId,AddedDate)VALUES(@ProductId,@UnitId,@Quantities,@ConversionRate,@CompanyId,@AddedDate)", paraCon, sql, true, 0, commandType: CommandType.Text);
                            }

                            foreach (var item in TodoList)
                            {

                                //StockPosting
                                var parastock = new DynamicParameters();
                                parastock.Add("@BatchId", returnBatchId);
                                parastock.Add("@Date", DateTime.Now);
                                parastock.Add("@NepaliDate", strManu);
                                parastock.Add("@CompanyId", CompanyId);
                                parastock.Add("@FinancialYearId", FinancialYearId);
                                parastock.Add("@LedgerId", 0);
                                parastock.Add("@GodownId", 1);
                                parastock.Add("@InwardQty", item.Qty);
                                parastock.Add("@OutwardQty", 0);
                                parastock.Add("@ProductId", MemID);
                                parastock.Add("@RackId", 1);
                                parastock.Add("@Rate", item.Rate);
                                parastock.Add("@UnitId", item.UnitId);
                                parastock.Add("@DetailsId", MemID);
                                parastock.Add("@InvoiceNo", MemID);
                                parastock.Add("@VoucherNo", MemID);
                                parastock.Add("@VoucherTypeId", 2);
                                parastock.Add("@AgainstInvoiceNo", "NA");
                                parastock.Add("@AgainstVoucherNo", "NA");
                                parastock.Add("@AgainstVoucherTypeId", 0);
                                parastock.Add("@StockCalculate", "Opening");
                                parastock.Add("@AddedDate", DateTime.Now);
                                var valuesStock = sqlcon.Query<long>("StockPostingInsert", parastock, sql, true, 0, commandType: CommandType.StoredProcedure);

                            }

                        }
                        sql.Commit();
                        Snackbar.Add("Saved Successfully.", Severity.Success);
                        LoadData();
                        navManager.NavigateTo("inventory/productlist");
                    }
                    else
                    {
                        Snackbar.Add("Product Name already exists.", Severity.Info);
                        navManager.NavigateTo("inventory/productlist");
                    }
                }
                else
                {
                    Snackbar.Add("Product Code already exists.", Severity.Info);
                    navManager.NavigateTo("inventory/productlist");
                }
            }
        }
        else
        {
            Snackbar.Add("You dont have to privilege.", Severity.Error);
            //Toaster.Add("You dont have to privilege.", MatToastType.Success, "Dashboard", null);
            navManager.NavigateTo("dashboard");
        }
    }
    void ModalAdd()
    {
        if (productOpening.UnitId == 0)
        {
            Snackbar.Add("Please Select Unit.", Severity.Error);
            return;
        }
        else if (productOpening.Qty == 0)
        {
            Snackbar.Add("Please type qty.", Severity.Error);
            return;
        }
        else if (productOpening.Rate == 0)
        {
            Snackbar.Add("Please type rate.", Severity.Error);
            return;
        }

        if (editedID == 0)
        {
            var myTodoItem = new ProductView()
            {
                Id = TodoList.Count() + 1,
                UnitId = productOpening.UnitId,
                UnitName = strUnitName,
                Qty = productOpening.Qty,
                Rate = productOpening.Rate,

            };
            TodoList.Add(myTodoItem);
            strUnitName = string.Empty;
            productOpening.UnitId = 0;
            productOpening.Qty = 0;
            productOpening.Rate = 0;
            Snackbar.Add("New added.", Severity.Info);
        }
        else
        {
            var myTodo = TodoList.FirstOrDefault(x => x.Id == editedID);
            myTodo.UnitId = productOpening.UnitId;
            myTodo.UnitName = strUnitName;
            myTodo.Qty = productOpening.Qty;
            myTodo.Rate = productOpening.Rate;
            strUnitName = string.Empty;
            productOpening.UnitId = 0;
            productOpening.Qty = 0;
            productOpening.Rate = 0;
            Snackbar.Add("edit finished.", Severity.Info);
            editedID = 0;
        }
    }
    void ModalAddUnit()
    {
        if (convertion.UnitId == 0)
        {
            Snackbar.Add("Please Select Unit.", Severity.Error);
            return;
        }
        else if (convertion.Quantities == 0)
        {
            Snackbar.Add("Please type qty.", Severity.Error);
            return;
        }
        else if (convertion.ConversionRate == 0)
        {
            Snackbar.Add("Please type rate.", Severity.Error);
            return;
        }

        if (editedIDCon == 0)
        {
            var myTodoItem = new ProductView()
            {
                Id = TodoListCon.Count() + 1,
                UnitId = convertion.UnitId,
                UnitName = strUnitNameCon,
                Qty = convertion.Quantities,
                Rate = convertion.ConversionRate,

            };
            TodoListCon.Add(myTodoItem);
            strUnitNameCon = string.Empty;
            convertion.UnitId = 0;
            convertion.Quantities = 0;
            convertion.ConversionRate = 0;
            Snackbar.Add("New added.", Severity.Info);
        }
        else
        {
            var myTodo = TodoListCon.FirstOrDefault(x => x.Id == editedIDCon);
            myTodo.UnitId = convertion.UnitId;
            myTodo.UnitName = strUnitNameCon;
            myTodo.Qty = convertion.Quantities;
            myTodo.Rate = convertion.ConversionRate;
            strUnitNameCon = string.Empty;
            convertion.UnitId = 0;
            convertion.Quantities = 0;
            convertion.ConversionRate = 0;
            Snackbar.Add("edit finished.", Severity.Info);
            editedIDCon = 0;
        }
    }
    void deleteItemUnitconvertion(long id)
    {
        var myTodo = TodoListCon.FirstOrDefault(x => x.Id == id);
        TodoListCon.Remove(myTodo);

        //HoldId
        //var myHoldId = new DeleteItem()
        //{
        //    DeleteItemIdnext = myTodo.Id,
        //};
        //deleteNoConvertion.Add(myHoldId);
        Snackbar.Add("Removed.", Severity.Info);
    }
    void deleteItem(long id)
    {
        var myTodo = TodoList.FirstOrDefault(x => x.Id == id);
        TodoList.Remove(myTodo);

        //HoldId
        //var myHoldId = new DeleteItem()
        //{
        //    DeleteItemId = myTodo.Id,
        //};
        //deleteNo.Add(myHoldId);
        Snackbar.Add("Removed.", Severity.Info);
    }
    protected void UnitClicked()
    {
        if (productOpening.UnitId > 0)
        {
            strUnitName = listUnit.FirstOrDefault(s => s.UnitId == productOpening.UnitId).UnitName;
        }
        else
        {
            strUnitName = string.Empty;
        }
    }
    protected void UnitClickedCon()
    {
        if (convertion.UnitId > 0)
        {
            strUnitNameCon = listUnit.FirstOrDefault(s => s.UnitId == convertion.UnitId).UnitName;
        }
        else
        {
            strUnitNameCon = string.Empty;
        }
    }
    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            ImageUploaded = ms.ToArray();
        }
    }

    string convertImageToDisplay(byte[] image)
    {
        if (image != null)
        {
            var base64 = Convert.ToBase64String(image);
            var finalStr = string.Format("data:image/jpg;base64,{0}", base64);
            return finalStr;
        }
        return "";
    }
    void Cancel()
    {
        navManager.NavigateTo("inventory/productlist");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PriviliageRepository priviliageRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProductRepository productRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TapSizeRepository settingRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProductGroupRepository productgroupRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DatabaseConnection _conn { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<App> localizer { get; set; }
    }
}
#pragma warning restore 1591
