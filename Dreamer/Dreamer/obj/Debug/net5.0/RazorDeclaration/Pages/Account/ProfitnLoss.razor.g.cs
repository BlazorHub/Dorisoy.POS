// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dreamer.Pages.Account
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Connection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Apimodel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Chart;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using MudBlazor.Dialog;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using NumericWordsConversion;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\ProfitnLoss.razor"
using NPOI.SS.UserModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\ProfitnLoss.razor"
using NPOI.XSSF.UserModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\ProfitnLoss.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\ProfitnLoss.razor"
using System.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/account/profitnloss")]
    public partial class ProfitnLoss : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 121 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\ProfitnLoss.razor"
       

    List<BillingReport> final = new List<BillingReport>();
    //GetSessionInfo
    long CompanyId;
    long RoleId;
    DateTime FromDate;
    DateTime ToDate;
    string CheckDis = "c";
    private string value1, value2;
    long LedgerId;
    string FromNepali;
    string ToNepali;
    string FromDateEng;
    string ToDateEng;
    string fromD;
    string toD;
    string Check = "Uncheck";
    string companyName;
    string address;
    string phone;
    string myMarkup;
    Privilege privi = new Privilege();
    string strMenu = "ProfitnLoss";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    protected async override void OnInitialized()
    {
        CompanyId = await sessionStorage.GetItemAsync<long>("CompanyId");
        RoleId = await sessionStorage.GetItemAsync<long>("RoleId");
        FromDate = await sessionStorage.GetItemAsync<DateTime>("FromDate");
        ToDate = await sessionStorage.GetItemAsync<DateTime>("ToDate");
        //CheckPriviliage
        privi = priviliageRepository.PriviliageCheck(strMenu, RoleId, CompanyId);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Toaster.Add("You dont have to privilege.", MatToastType.Success, "Dashboard", null);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        Check = "Uncheck";
        FromNepali = DreamerDateConveter.convertToBS(DateTime.Now);
        ToNepali = DreamerDateConveter.convertToBS(DateTime.Now);
        FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
        ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();
        var resultCompany = icompany.ViewCompany(CompanyId);
        companyName = resultCompany.CompanyName;
        address = resultCompany.Address;
        phone = resultCompany.Phone;
        fromD = FromNepali;
        toD = ToNepali;
        //Search();
        StateHasChanged();
    }
    protected void Search()
    {
        Check = "check";
        decimal decgranExTotal = 0;
        decimal decgranIncTotal = 0;
        string calculationMethod = "FIFO";
        DataTable dtblFinancial = new DataTable();
        DataSet DsetProfitAndLoss = new DataSet();

        //LedgerProfitLoss
        DataTable dtblFinancial1 = new DataTable();
        DataSet DsetProfitAndLoss1 = new DataSet();
        DsetProfitAndLoss = services.ProfitAndLossAnalysis(DateTime.Parse(FromDateEng), DateTime.Parse(ToDateEng), CompanyId);
        //Ledger
        DsetProfitAndLoss1 = services.ProfitAndLossAnalysisDetailed(DateTime.Parse(FromDateEng), DateTime.Parse(ToDateEng), CompanyId);
        //-------------------  -------------------------------//
        decimal dcOpeningStock = 0;
        dcOpeningStock = services.StockValueGetOnDate(DateTime.Parse(FromDateEng), DateTime.Parse(ToDateEng), calculationMethod, true, false);

        string values = @"<table class='table-responsive' id='tbldemo'>
                          <tr>
                           <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            </tr>";
        values += @"<tr>
<th>" + localizer["Expense"] + @"</th>
<th>" + localizer["Amount"] + @"</th>
<th>" + localizer["Income"] + @"</th>
<th>" + localizer["Amount"] + @"</th>
            </tr>";
        if (dcOpeningStock > 0)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Opening Stock" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcOpeningStock, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        }
        else
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Opening Stock" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcOpeningStock, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        }
        //Closing Stock
        decimal dcClosingStock = 0;
        dcClosingStock = services.StockValueGetOnDate(DateTime.Parse(ToDateEng), calculationMethod, false, false);
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Closing Stock" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcClosingStock, PublicVariables._inNoOfDecimalPlaces) + @"</td>
                    </tr>";
        /// ---Purchase Account  - Debit
        dtblFinancial = new DataTable();
        dtblFinancial = DsetProfitAndLoss.Tables[0];
        //PurchaseLedger
        dtblFinancial1 = new DataTable();
        dtblFinancial1 = DsetProfitAndLoss1.Tables[0];
        decimal dcPurchaseAccount = 0m;
        decimal dcPurchaseAccount1 = 0m;
        if (dtblFinancial.Rows.Count > 0)
        {
            foreach (DataRow rw in dtblFinancial.Rows)
            {
                decimal dcBalance = decimal.Parse(rw["Debit"].ToString().ToString());
                dcPurchaseAccount += dcBalance;



            }

        }

        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Purchase Accounts" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcPurchaseAccount, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        if (CheckDis == "d")
        {
            if (dtblFinancial1.Rows.Count > 0)
            {
                foreach (DataRow rw1 in dtblFinancial1.Rows)
                {
                    values += @"<tr>
<td style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw1["Balance"].ToString() + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
                }
            }
        }

        //---Sales Account  -Credit
        dtblFinancial = new DataTable();
        dtblFinancial = DsetProfitAndLoss.Tables[1];
        dtblFinancial1 = new DataTable();
        dtblFinancial1 = DsetProfitAndLoss1.Tables[1];
        decimal dcSalesAccount = 0m;
        if (dtblFinancial.Rows.Count > 0)
        {
            foreach (DataRow rw in dtblFinancial.Rows)
            {
                decimal dcBalance = decimal.Parse(rw["Credit"].ToString().ToString());
                dcSalesAccount += dcBalance;
            }
        }
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Sales Accounts" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcSalesAccount, PublicVariables._inNoOfDecimalPlaces) + @"</td>
                    </tr>";
        if (CheckDis == "d")
        {
            if (dtblFinancial1.Rows.Count > 0)
            {
                foreach (DataRow rw1 in dtblFinancial1.Rows)
                {
                    values += @"<tr>
<td style='style='font-size:10px;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw1["Balance"].ToString() + @"</td>
                    </tr>";
                }
            }
        }
        //---Direct Expense
        dtblFinancial = new DataTable();
        dtblFinancial = DsetProfitAndLoss.Tables[2];
        dtblFinancial1 = new DataTable();
        dtblFinancial1 = DsetProfitAndLoss1.Tables[2];
        decimal dcDirectExpense = 0m;
        if (dtblFinancial.Rows.Count > 0)
        {
            foreach (DataRow rw in dtblFinancial.Rows)
            {
                decimal dcBalance = Convert.ToDecimal(rw["Debit"].ToString());
                dcDirectExpense += dcBalance;
            }
        }
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Direct Expenses" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcDirectExpense, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        if (CheckDis == "d")
        {
            if (dtblFinancial1.Rows.Count > 0)
            {
                foreach (DataRow rw1 in dtblFinancial1.Rows)
                {
                    values += @"<tr>
<td style='style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw1["Balance"].ToString() + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
                }
            }
        }
        //----Direct Income
        dtblFinancial = new DataTable();
        dtblFinancial = DsetProfitAndLoss.Tables[3];
        dtblFinancial1 = new DataTable();
        dtblFinancial1 = DsetProfitAndLoss1.Tables[3];
        decimal dcDirectIncoome = 0m;
        if (dtblFinancial.Rows.Count > 0)
        {
            foreach (DataRow rw in dtblFinancial.Rows)
            {
                decimal dcBalance = Convert.ToDecimal(rw["Credit"].ToString());
                dcDirectIncoome += dcBalance;
            }
        }
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Direct Incomes" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcDirectIncoome, PublicVariables._inNoOfDecimalPlaces) + @"</td>
                    </tr>";
        if (CheckDis == "d")
        {
            if (dtblFinancial1.Rows.Count > 0)
            {
                foreach (DataRow rw1 in dtblFinancial1.Rows)
                {
                    values += @"<tr>
<td style='style='font-size:10px;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw1["Balance"].ToString() + @"</td>
                    </tr>";
                }
            }
        }
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "_______________________" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "_______________________" + @"</td>
                    </tr>";
        decimal dcTotalExpense = 0;
        decimal dcTotalIncome = 0;
        dcTotalExpense = dcOpeningStock + dcPurchaseAccount + dcDirectExpense;
        dcTotalIncome = dcClosingStock + dcSalesAccount + dcDirectIncoome;
        dcTotalExpense = Math.Round(dcTotalExpense, PublicVariables._inNoOfDecimalPlaces);
        dcTotalIncome = Math.Round(dcTotalIncome, PublicVariables._inNoOfDecimalPlaces);
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Total" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Total" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        decimal dcGrossProfit = 0;
        decimal dcGrossLoss = 0;
        if (dcTotalExpense > dcTotalIncome)
        {
            dcGrossLoss = dcTotalExpense - dcTotalIncome;
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcTotalExpense, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcTotalExpense, PublicVariables._inNoOfDecimalPlaces) + @"</td>
                    </tr>";
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Gross Loss b/d" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcTotalExpense - dcTotalIncome, PublicVariables._inNoOfDecimalPlaces) + @"</td>
                    </tr>";
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Gross Loss b/d" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcTotalExpense - dcTotalIncome, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        }
        else
        {
            dcGrossProfit = dcTotalIncome - dcTotalExpense;
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcTotalIncome, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcTotalIncome, PublicVariables._inNoOfDecimalPlaces) + @"</td>
                    </tr>";
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Gross Profit c/d" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcTotalIncome - dcTotalExpense, PublicVariables._inNoOfDecimalPlaces) + @"</td>
                    </tr>";

            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Gross Profit c/d" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcTotalIncome - dcTotalExpense, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        }
        ///------Indirect Expense
        dtblFinancial = new DataTable();
        dtblFinancial = DsetProfitAndLoss.Tables[4];
        dtblFinancial1 = new DataTable();
        dtblFinancial1 = DsetProfitAndLoss1.Tables[4];
        decimal dcIndirectExpense = 0;
        if (dtblFinancial.Rows.Count > 0)
        {
            foreach (DataRow rw in dtblFinancial.Rows)
            {
                decimal dcBalance = Convert.ToDecimal(rw["Debit"].ToString());
                dcIndirectExpense += dcBalance;
            }
        }
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Indirect Expenses" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcIndirectExpense, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        if (CheckDis == "d")
        {
            if (dtblFinancial1.Rows.Count > 0)
            {
                foreach (DataRow rw1 in dtblFinancial1.Rows)
                {
                    values += @"<tr>
<td style='style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw1["Balance"].ToString() + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
                }
            }
        }
        ///---Indirect Income
        dtblFinancial = new DataTable();
        dtblFinancial = DsetProfitAndLoss.Tables[5];
        dtblFinancial1 = new DataTable();
        dtblFinancial1 = DsetProfitAndLoss1.Tables[5];
        decimal dcIndirectIncome = 0m;
        if (dtblFinancial.Rows.Count > 0)
        {
            foreach (DataRow rw in dtblFinancial.Rows)
            {
                decimal dcBalance = Convert.ToDecimal(rw["Credit"].ToString());
                dcIndirectIncome += dcBalance;
            }
        }
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Indirect Incomes" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcIndirectIncome, PublicVariables._inNoOfDecimalPlaces) + @"</td>
                    </tr>";
        if (CheckDis == "d")
        {
            if (dtblFinancial1.Rows.Count > 0)
            {
                foreach (DataRow rw1 in dtblFinancial1.Rows)
                {
                    values += @"<tr>
<td style='style='font-size:10px;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw1["Balance"].ToString() + @"</td>
                    </tr>";
                }
            }
        }


        //---- Calculating Grand total
        decimal dcGrandTotalExpense = dcGrossLoss + dcIndirectExpense;
        decimal dcGrandTotalIncome = dcGrossProfit + dcIndirectIncome;
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "_______________________" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "_______________________" + @"</td>
                    </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Grand Total" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + dcGrandTotalExpense + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Grand Total" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + dcGrandTotalExpense + @"</td>
                    </tr>";

        if (dcGrandTotalExpense > dcGrandTotalIncome)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Net Loss" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcGrandTotalExpense - dcGrandTotalIncome, PublicVariables._inNoOfDecimalPlaces) + @"</td>
                    </tr>";
            decgranExTotal = dcGrandTotalExpense;
        }
        else
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Net Profit" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcGrandTotalIncome - dcGrandTotalExpense, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
                    </tr>";
            decgranIncTotal = dcGrandTotalIncome;
        }

        values += " </table>";
        myMarkup = values;
    }
    private async Task ChangeFrom()
    {
        try
        {

            if (FromNepali == string.Empty)
            {
                FromNepali = DreamerDateConveter.convertToBS(DateTime.Now);
                FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
            }
            else
            {
                FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
            }
        }
        catch (Exception ex)
        {
            if (FromDateEng == string.Empty)
            {
                Toaster.Add("Invalid From Date", MatToastType.Info, "Invalid", null);
            }
        }
    }
    private async Task ChangeTo()
    {
        try
        {

            if (ToNepali == string.Empty)
            {
                ToNepali = DreamerDateConveter.convertToBS(DateTime.Now);
                ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();
            }
            else
            {
                ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();
            }
        }
        catch (Exception ex)
        {
            if (ToDateEng == string.Empty)
            {
                Toaster.Add("Invalid To Date", MatToastType.Info, "Invalid", null);
            }
        }
    }
    public async Task Print()
    {
        await JsRuntime.InvokeVoidAsync("printDiv");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster Toaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PriviliageRepository priviliageRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AccountReportRepository services { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICompany icompany { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<App> localizer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService sessionStorage { get; set; }
    }
}
#pragma warning restore 1591
