// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dreamer.Pages.CompanySetting
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Connection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Apimodel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Chart;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using MudBlazor.Dialog;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using NumericWordsConversion;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\CompanySetting\FinancialYearlist.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\CompanySetting\FinancialYearlist.razor"
using Dapper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\CompanySetting\FinancialYearlist.razor"
using System.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/setting/financialyearlist")]
    public partial class FinancialYearlist : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 127 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\CompanySetting\FinancialYearlist.razor"
       
    FinancialYear customerType = new FinancialYear();
    List<FinancialYear> batchView = new List<FinancialYear>();
    //GetSessionInfo
    long CompanyId;
    long RoleId;
    long FinancialYearId;
    long UserId;
    string FromNepali;
    string ToNepali;
    string FromDateEng;
    string ToDateEng;
    string BatchNo = string.Empty;
    string ProductName = string.Empty;
    Privilege privi = new Privilege();
    string strMenu = "AccountGroup";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    protected async override void OnInitialized()
    {
        CompanyId = await sessionStorage.GetItemAsync<long>("CompanyId");
        RoleId = await sessionStorage.GetItemAsync<long>("RoleId");
        FinancialYearId = await sessionStorage.GetItemAsync<long>("FinancialYearId");
        UserId = await sessionStorage.GetItemAsync<long>("UserId");
        //CheckPriviliage
        privi = priviliageRepository.PriviliageCheck(strMenu, RoleId, CompanyId);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Snackbar.Add("You dont have to privilege.", Severity.Success);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        Load();
        StateHasChanged();
    }
    protected void Load()
    {
        FromNepali = DreamerDateConveter.convertToBS(DateTime.Now);
        FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
        //customerType.ManufacturingDate = Convert.ToDateTime(FromDateEng);
        //customerType.ManufacturingNepali = FromNepali;
        ToNepali = DreamerDateConveter.convertToBS(DateTime.Now);
        ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();

        //customerType.ExpiryDate = Convert.ToDateTime(ToDateEng);
        //customerType.ExpiryNepali = ToNepali;
        customerType.FiscalYear = string.Empty;
        batchView = companyRepository.ViewAllFincilYer(CompanyId);
    }
    protected void SaveCustomerType()
    {
        if (customerType.NepaliFrom == string.Empty)
        {
            Snackbar.Add("Type From Date.", Severity.Info);
            return;
        }
        else if (customerType.NepaliTo == string.Empty)
        {
            Snackbar.Add("Type To Date", Severity.Info);
            return;
        }
        else if (customerType.FiscalYear == string.Empty)
        {
            Snackbar.Add("Type FiscalYear.", Severity.Info);
            return;
        }
        else
        {
            if (customerType.FinancialYearId == 0)
            {
                if (strAdd == true)
                {
                    var isCheck = companyRepository.CheckFinancialYearName(CompanyId, Convert.ToDateTime(FromDateEng), Convert.ToDateTime(ToDateEng));
                    if (isCheck == true)
                    {
                        Snackbar.Add("Already Exists.", Severity.Info);
                        //Toaster.Add("Already Exists.", MatToastType.Info, "Area", null);
                        navManager.NavigateTo("setting/financialyearlist");
                    }
                    else
                    {
                        SqlConnection sqlcon = new SqlConnection(_conn.DbConn);
                        sqlcon.Open();
                        SqlTransaction sql = sqlcon.BeginTransaction();
                        var para = new DynamicParameters();
                        para.Add("@FromDate", Convert.ToDateTime(FromDateEng));
                        para.Add("@ToDate", Convert.ToDateTime(ToDateEng));
                        para.Add("@NepaliFrom", FromNepali);
                        para.Add("@NepaliTo", ToNepali);
                        para.Add("@FiscalYear", customerType.FiscalYear);
                        para.Add("@CompanyId", CompanyId);
                        para.Add("@AddedDate", DateTime.Now);
                        para.Add("@MemIDOUT", dbType: DbType.Int64, direction: ParameterDirection.Output);
                        sqlcon.Execute("FinancialYearInsert", para, sql, 0, CommandType.StoredProcedure);
                        long MemID = para.Get<long>("MemIDOUT");
                        if (MemID > 0)
                        {
                            var parastock = new DynamicParameters();
                            parastock.Add("@companyId", CompanyId);
                            parastock.Add("@FromDate", FromDateEng);
                            parastock.Add("@ToDate", ToDateEng);
                            parastock.Add("@FromNepali", FromNepali);
                            parastock.Add("@ToNepali", ToNepali);
                            parastock.Add("@FiscalYear", customerType.FiscalYear);
                            parastock.Add("@FinancialYearId", FinancialYearId);
                            var valuesStock = sqlcon.Query<long>("UPDATE Company SET FromDate=@FromDate,ToDate=@ToDate,FromNepali=@FromNepali,ToNepali=@ToNepali,FiscalYear=@FiscalYear,FinancialYearId=@FinancialYearId where CompanyId=@CompanyId", parastock, sql, true, 0, commandType: CommandType.Text);
                        }


                        sql.Commit();
                        Snackbar.Add("Saved Successfully.", Severity.Success);
                        Load();
                        navManager.NavigateTo("setting/financialyearlist");
                    }
                }
                else
                {
                    Snackbar.Add("You dont have to privilege.", Severity.Error);
                    //Toaster.Add("You dont have to privilege.", MatToastType.Success, "Dashboard", null);
                    navManager.NavigateTo("dashboard");
                }
            }
            else
            {

            }
        }
    }
    private async Task ChangeFrom()
    {
        try
        {

            if (FromNepali == string.Empty)
            {
                FromNepali = DreamerDateConveter.convertToBS(DateTime.Now);
                FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
                //customerType.ManufacturingDate = Convert.ToDateTime(FromDateEng);
                //customerType.ManufacturingNepali = FromNepali;
            }
            else
            {
                FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
                //customerType.ManufacturingDate = Convert.ToDateTime(FromDateEng);
            }
        }
        catch (Exception ex)
        {
            if (FromDateEng == string.Empty)
            {
                Snackbar.Add("Invalid.", Severity.Error);
            }
        }
    }
    private async Task ChangeTo()
    {
        try
        {

            if (ToNepali == string.Empty)
            {
                ToNepali = DreamerDateConveter.convertToBS(DateTime.Now);
                ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();

                //customerType.ExpiryDate = Convert.ToDateTime(ToDateEng);
                //customerType.ExpiryNepali = ToNepali;
            }
            else
            {
                ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();
                //customerType.ExpiryDate = Convert.ToDateTime(ToDateEng);
            }
        }
        catch (Exception ex)
        {
            if (ToDateEng == string.Empty)
            {
                Snackbar.Add("Invalid.", Severity.Error);
            }
        }
    }
    async Task Delete(long id)
    {
        //    if (strDelete == true)
        //    {
        //        bool confirmed = await JsRuntime.InvokeAsync<bool>
        //("confirm", "Are you sure?");
        //        if (confirmed)
        //        {

        //            bool isSave = false;
        //            isSave = batchRepository.DeleteBatch(id);
        //            if (isSave == true)
        //            {
        //                Snackbar.Add("Deleted Successfully.", Severity.Success);
        //                LoadData();
        //                navManager.NavigateTo("inventory/batchlist");
        //            }
        //            else
        //            {
        //                Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
        //                navManager.NavigateTo("inventory/batchlist");
        //            }

        //        }
        //    }
        //    else
        //    {
        //        Snackbar.Add("You dont have to privilege.", Severity.Info);
        //        navManager.NavigateTo("dashboard");
        //    }
    }
    async void Edit(long id)
    {
        customerType = companyRepository.ViewFinancialYear(Convert.ToInt64(id));
        SqlConnection sqlcon = new SqlConnection(_conn.DbConn);
        sqlcon.Open();
        var parastock = new DynamicParameters();
        parastock.Add("@companyId", CompanyId);
        parastock.Add("@FromDate", customerType.FromDate);
        parastock.Add("@ToDate", customerType.ToDate);
        parastock.Add("@FromNepali", customerType.NepaliFrom);
        parastock.Add("@ToNepali", customerType.NepaliTo);
        parastock.Add("@FiscalYear", customerType.FiscalYear);
        parastock.Add("@FinancialYearId", FinancialYearId);
        var valuesStock = sqlcon.Query<long>("UPDATE Company SET FromDate=@FromDate,ToDate=@ToDate,FromNepali=@FromNepali,ToNepali=@ToNepali,FiscalYear=@FiscalYear,FinancialYearId=@FinancialYearId where CompanyId=@CompanyId", parastock, null, true, 0, commandType: CommandType.Text);
        sqlcon.Close();


        var resultCompany = companyRepository.ViewCompany(CompanyId);
        if (resultCompany != null)
        {
            await sessionStorage.SetItemAsync("CompanyId", resultCompany.CompanyId);
            await sessionStorage.SetItemAsync("FinancialYearId", resultCompany.FinancialYearId);
            await sessionStorage.SetItemAsync("FromDate", resultCompany.FromDate);
            await sessionStorage.SetItemAsync("ToDate", resultCompany.ToDate);
            //CompanyId = resultCompany.CompanyId;
            //FinancialYearId = resultCompany.FinancialYearId;
            //PublicVariables._dtFromDate = resultCompany.FromDate;
            //PublicVariables._dtToDate = resultCompany.ToDate;
            //PublicVariables._dtNepaliFrom = resultCompany.FromNepali;
            //PublicVariables._dtNepaliTo = resultCompany.ToNepali;
            PublicVariables._inNoOfDecimalPlaces = resultCompany.NoofDecimal;
        }
        StateHasChanged();

        Snackbar.Add("Change Financialyear Successfully.", Severity.Success);
    }
    void Cancel()
    {
        FromNepali = DreamerDateConveter.convertToBS(DateTime.Now);
        FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
        //customerType.ManufacturingDate = Convert.ToDateTime(FromDateEng);
        //customerType.ManufacturingNepali = FromNepali;
        ToNepali = DreamerDateConveter.convertToBS(DateTime.Now);
        ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();
        customerType.FiscalYear = string.Empty;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PriviliageRepository priviliageRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CompanyRepository companyRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DatabaseConnection _conn { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<App> localizer { get; set; }
    }
}
#pragma warning restore 1591
