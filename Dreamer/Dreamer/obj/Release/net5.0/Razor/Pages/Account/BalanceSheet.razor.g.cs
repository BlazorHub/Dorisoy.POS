#pragma checksum "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "899ecded9632696b97860cd561088e3b5b58cddb"
// <auto-generated/>
#pragma warning disable 1591
namespace Dreamer.Pages.Account
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Service.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Connection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Apimodel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Chart;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Nepdreamer.Repository.Inventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using MudBlazor.Dialog;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using NumericWordsConversion;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using BlazorContextMenu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
using NPOI.SS.UserModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
using NPOI.XSSF.UserModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
using System.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/account/balancesheet")]
    public partial class BalanceSheet : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "class", "page-section");
            __builder.OpenElement(2, "div");
            __builder.AddAttribute(3, "class", "card card-fluid");
            __builder.OpenElement(4, "div");
            __builder.AddAttribute(5, "class", "card-header");
            __builder.OpenElement(6, "ul");
            __builder.AddAttribute(7, "class", "nav nav-tabs card-header-tabs");
            __builder.OpenElement(8, "li");
            __builder.AddAttribute(9, "class", "nav-item");
            __builder.OpenElement(10, "a");
            __builder.AddAttribute(11, "href", "inventory/inventorymenu");
            __builder.AddAttribute(12, "class", "nav-link");
#nullable restore
#line 23 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(13, localizer["Balance Sheet"]);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(14, "\r\n        \r\n        ");
            __builder.OpenElement(15, "div");
            __builder.AddAttribute(16, "class", "card-body");
            __builder.OpenElement(17, "div");
            __builder.AddAttribute(18, "class", "form-group");
            __builder.OpenElement(19, "table");
            __builder.OpenElement(20, "tr");
            __builder.OpenElement(21, "td");
            __builder.AddAttribute(22, "style", "width:260px;");
            __builder.OpenElement(23, "label");
            __builder.AddAttribute(24, "for", "maskUsphone");
#nullable restore
#line 37 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(25, localizer["To Date"]);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(26, "\r\n                            ");
            __builder.OpenElement(27, "input");
            __builder.AddAttribute(28, "type", "text");
            __builder.AddAttribute(29, "onkeyup", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>(this, 
#nullable restore
#line 38 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                                                                           ChangeTo

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(30, "autocomplete", "off");
            __builder.AddAttribute(31, "value", Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 38 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                                                       ToNepali

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(32, "oninput", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => ToNepali = __value, ToNepali));
            __builder.SetUpdatesAttributeName("value");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(33, "\r\n                        ");
            __builder.OpenElement(34, "td");
            __builder.AddAttribute(35, "style", "width:100px;");
            __builder.OpenElement(36, "input");
            __builder.AddAttribute(37, "type", "text");
            __builder.AddAttribute(38, "readonly");
            __builder.AddAttribute(39, "autocomplete", "off");
            __builder.AddAttribute(40, "value", Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 41 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                                                       ToDateEng

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(41, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => ToDateEng = __value, ToDateEng));
            __builder.SetUpdatesAttributeName("value");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(42, "\r\n                        ");
            __builder.OpenElement(43, "td");
            __builder.OpenComponent<MatBlazor.MatRadioGroup<string>>(44);
            __builder.AddAttribute(45, "Value", global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<string>(
#nullable restore
#line 44 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                                                        CheckDis

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(46, "ValueChanged", global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<string>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<string>(this, global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => CheckDis = __value, CheckDis))));
            __builder.AddAttribute(47, "ValueExpression", global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Linq.Expressions.Expression<System.Func<string>>>(() => CheckDis));
            __builder.AddAttribute(48, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
                __builder2.OpenComponent<MatBlazor.MatRadioButton<string>>(49);
                __builder2.AddAttribute(50, "Style", "float:left;");
                __builder2.AddAttribute(51, "Value", global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<string>(
#nullable restore
#line 45 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                                                                             "c"

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(52, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(53, "Condensed");
                }
                ));
                __builder2.CloseComponent();
                __builder2.AddMarkupContent(54, "\r\n                                ");
                __builder2.OpenComponent<MatBlazor.MatRadioButton<string>>(55);
                __builder2.AddAttribute(56, "Style", "float:left;");
                __builder2.AddAttribute(57, "Value", global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<string>(
#nullable restore
#line 46 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                                                                             "d"

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(58, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder3) => {
                    __builder3.AddContent(59, "Details");
                }
                ));
                __builder2.CloseComponent();
            }
            ));
            __builder.CloseComponent();
            __builder.CloseElement();
            __builder.AddMarkupContent(60, "\r\n                        ");
            __builder.OpenElement(61, "td");
            __builder.AddAttribute(62, "style", "width:140px;");
            __builder.OpenElement(63, "button");
            __builder.AddAttribute(64, "class", "btn btn-secondary");
            __builder.AddAttribute(65, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 50 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                                                                        (() => Search())

#line default
#line hidden
#nullable disable
            ));
#nullable restore
#line 50 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(66, localizer["Search"]);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(67, "\r\n                            ");
            __builder.OpenElement(68, "button");
            __builder.AddAttribute(69, "class", "btn btn-secondary");
            __builder.AddAttribute(70, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 51 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                                                                         Print

#line default
#line hidden
#nullable disable
            ));
#nullable restore
#line 51 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(71, localizer["Print"]);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(72, "\r\n            \r\n            ");
            __builder.OpenElement(73, "div");
            __builder.AddAttribute(74, "id", "myTable_wrapper");
            __builder.AddAttribute(75, "class", "dataTables_wrapper dt-bootstrap4 no-footer");
            __builder.OpenElement(76, "div");
            __builder.AddAttribute(77, "class", "table-responsive");
#nullable restore
#line 59 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                     if (Check == "Uncheck")
                    {

                    }
                    else
                    {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(78, "<span style=\"border-bottom:1px solid Blue; text-align:center;\"></span>\r\n                        ");
            __builder.OpenElement(79, "div");
            __builder.AddAttribute(80, "id", "PrintDiv");
            __builder.AddAttribute(81, "style", "width:100%;height:800px;border-width:2px;border-color:blue;border:solid");
            __builder.OpenElement(82, "table");
            __builder.AddAttribute(83, "id", "table");
            __builder.AddAttribute(84, "style", "margin-top:40px;");
            __builder.AddMarkupContent(85, "<tr><th></th>\r\n                                    <th></th>\r\n                                    <th></th></tr>\r\n                                ");
            __builder.OpenElement(86, "tr");
            __builder.OpenElement(87, "td");
            __builder.AddAttribute(88, "style", "width:1000px; text-align:center;");
            __builder.OpenElement(89, "span");
            __builder.AddAttribute(90, "style", "font-size:20px;");
#nullable restore
#line 76 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(91, companyName);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(92, "\r\n                                ");
            __builder.OpenElement(93, "tr");
            __builder.OpenElement(94, "td");
            __builder.AddAttribute(95, "style", "width:1000px; text-align:center;");
            __builder.OpenElement(96, "span");
            __builder.AddAttribute(97, "style", "font-size:15px;");
#nullable restore
#line 82 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(98, address);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(99, "\r\n                                ");
            __builder.OpenElement(100, "tr");
            __builder.OpenElement(101, "td");
            __builder.AddAttribute(102, "style", "width:1000px; text-align:center;");
            __builder.OpenElement(103, "span");
            __builder.AddAttribute(104, "style", "font-size:11px;");
#nullable restore
#line 88 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(105, phone);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(106, "\r\n                                ");
            __builder.OpenElement(107, "tr");
            __builder.OpenElement(108, "td");
            __builder.AddAttribute(109, "style", "width:1000px; text-align:center;");
            __builder.OpenElement(110, "span");
            __builder.AddAttribute(111, "style", "font-size:14px;");
#nullable restore
#line 93 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(112, localizer["Balance Sheet"]);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(113, "\r\n                                ");
            __builder.OpenElement(114, "tr");
            __builder.OpenElement(115, "td");
            __builder.AddAttribute(116, "style", "width:1000px; text-align:center;");
            __builder.OpenElement(117, "span");
            __builder.AddAttribute(118, "style", "font-size:13px;");
#nullable restore
#line 98 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(119, localizer["Report"]);

#line default
#line hidden
#nullable disable
            __builder.AddContent(120, " ");
#nullable restore
#line 98 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(121, fromD);

#line default
#line hidden
#nullable disable
            __builder.AddContent(122, " / ");
#nullable restore
#line 98 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(123, toD);

#line default
#line hidden
#nullable disable
            __builder.AddContent(124, " BS");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(125, "\r\n                            ");
#nullable restore
#line 103 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
__builder.AddContent(126, (MarkupString)myMarkup);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 106 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
                    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 114 "D:\dotnet5Blazor\BusinessAccount\BusinessAccount\Dreamer\Dreamer\Pages\Account\BalanceSheet.razor"
       
    InventorySetting setting = new InventorySetting();
    List<BillingReport> final = new List<BillingReport>();
    //GetSessionInfo
    long CompanyId;
    long RoleId;
    DateTime FromDate;
    DateTime ToDate;
    string CheckDis = "c";
    private string value1, value2;
    long LedgerId;
    string FromNepali;
    string ToNepali;
    string FromDateEng;
    string ToDateEng;
    string fromD;
    string toD;
    string Check = "Uncheck";
    int inCurrenRowIndex = 0;
    int inCurentcolIndex = 0;
    decimal decPrintOrNot = 0;
    decimal decPrintOrNot1 = 0;
    string calculationMethod = string.Empty;
    string companyName;
    string address;
    string phone;
    string myMarkup;
    Privilege privi = new Privilege();
    string strMenu = "BalanceSheet";
    bool strAdd = true;
    bool strEdit = true;
    bool strDelete = true;
    bool strShow = true;
    protected async override void OnInitialized()
    {
        CompanyId = await sessionStorage.GetItemAsync<long>("CompanyId");
        RoleId = await sessionStorage.GetItemAsync<long>("RoleId");
        FromDate = await sessionStorage.GetItemAsync<DateTime>("FromDate");
        ToDate = await sessionStorage.GetItemAsync<DateTime>("ToDate");
        //CheckPriviliage
        privi = priviliageRepository.PriviliageCheck(strMenu, RoleId, CompanyId);
        if (privi != null)
        {
            strAdd = privi.AddAction;
            strEdit = privi.EditAction;
            strDelete = privi.DeleteAction;
            strShow = privi.ShowAction;
            if (strShow == false)
            {
                Toaster.Add("You dont have to privilege.", MatToastType.Success, "Dashboard", null);
                navManager.NavigateTo("dashboard");
            }
        }
        else
        {
            strAdd = true;
            strEdit = true;
            strDelete = true;
            strShow = true;
        }
        Check = "Uncheck";
        FromNepali = DreamerDateConveter.convertToBS(DateTime.Now);
        ToNepali = DreamerDateConveter.convertToBS(DateTime.Now);
        FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
        ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();
        var resultCompany = icompany.ViewCompany(CompanyId);
        companyName = resultCompany.CompanyName;
        address = resultCompany.Address;
        phone = resultCompany.Phone;
        fromD = FromNepali;
        toD = ToNepali;
        setting = settingRepository.EditInventorySetting(30);
        calculationMethod = setting.StockvaluecalculationMode;
        //Search();
        StateHasChanged();
    }
    protected void Search()
    {
        Check = "check";
        string calculationMethod = "FIFO";
        DataSet DsetBalanceSheet = new DataSet();
        DataTable dtbl = new DataTable();
        DsetBalanceSheet = services.BalanceSheet(DateTime.Parse(ToDateEng), CompanyId);


        //------------------- Asset -------------------------------//
        dtbl = DsetBalanceSheet.Tables[0];
        string values = @"<table class='table-responsive' id='tbldemo'>

                  <tr>
                  <th></th>
                  <th></th>
                  <th></th>
                  <th></th>
                  </tr>";
        values += @"<tr>
<th>" + localizer["Assets"] + @"</td>
<th>" + localizer["Amount"] + @"</td>
<th>" + localizer["Liabilities"] + @"</td>
<th>" + localizer["Amount"] + @"</td>
            </tr>";
        foreach (DataRow rw in dtbl.Rows)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + rw["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw["Balance"].ToString() + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            if (CheckDis == "d")
            {
                DataSet DsetBalanceSheet1 = new DataSet();
                DataTable dtbl1 = new DataTable();
                DsetBalanceSheet1 = services.BalanceSheetDetailed(DateTime.Parse(ToDateEng), CompanyId, Convert.ToInt64(rw["ID"].ToString()), true);
                dtbl1 = DsetBalanceSheet1.Tables[0];
                foreach (DataRow rw1 in dtbl1.Rows)
                {
                    values += @"<tr>
<td style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw1["Balance"].ToString() + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
                }
            }
        }
        decimal dcTotalAsset = 0;
        if (dtbl.Rows.Count > 0)
        {
            dcTotalAsset = decimal.Parse(dtbl.Compute("Sum(Balance)", string.Empty).ToString());
        }
        //------------------------ Liability ---------------------//
        dtbl = new DataTable();
        dtbl = DsetBalanceSheet.Tables[1];
        int index = 0;
        foreach (DataRow rw in dtbl.Rows)
        {
            if (index < dtbl.Rows.Count)
            {
                values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + rw["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw["Balance"].ToString() + @"</td>
            </tr>";
                if (CheckDis == "d")
                {
                    DataSet DsetBalanceSheet1 = new DataSet();
                    DataTable dtbl1 = new DataTable();
                    DsetBalanceSheet1 = services.BalanceSheetDetailed(DateTime.Parse(ToDateEng), CompanyId, Convert.ToInt64(rw["ID"].ToString()), false);
                    dtbl1 = DsetBalanceSheet1.Tables[0];
                    foreach (DataRow rw1 in dtbl1.Rows)
                    {
                        values += @"<tr>
<td style='font-size:10px;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='font-size:10px;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw1["Balance"].ToString() + @"</td>
            </tr>";
                    }
                }
            }
            else
            {
                values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + rw["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw["Balance"].ToString() + @"</td>
            </tr>";
                if (CheckDis == "d")
                {
                    DataSet DsetBalanceSheet1 = new DataSet();
                    DataTable dtbl1 = new DataTable();
                    DsetBalanceSheet1 = services.BalanceSheetDetailed(DateTime.Parse(ToDateEng), CompanyId, Convert.ToInt64(rw["AccountGroupId"].ToString()), false);
                    dtbl1 = DsetBalanceSheet1.Tables[0];
                    foreach (DataRow rw1 in dtbl1.Rows)
                    {
                        values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + rw1["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw1["Balance"].ToString() + @"</td>
            </tr>";
                    }
                }
            }
            index++;
        }
        decimal dcTotalLiability = 0;
        if (dtbl.Rows.Count > 0)
        {
            dcTotalLiability = decimal.Parse(dtbl.Compute("Sum(Balance)", string.Empty).ToString());
        }
        decimal dcClosingStock = 0;
        dcClosingStock = services.StockValueGetOnDate(Convert.ToDateTime(ToDateEng), calculationMethod, false, false);
        dcClosingStock = Math.Round(dcClosingStock, 2);
        //---------------------Opening Stock---------------------------------------------------------------------------------------------------------------
        decimal dcOpeninggStock = 0;
        dcOpeninggStock = services.StockValueGetOnDate(FromDate, calculationMethod, true, true);
        decimal dcProfit = 0;
        DataSet dsetProfitAndLoss = new DataSet();
        dsetProfitAndLoss = services.ProfitAndLossAnalysisUpToaDateForBalansheet(DateTime.Parse(FromDateEng), DateTime.Parse(FromDateEng), CompanyId);
        DataTable dtblProfit = new DataTable();
        dtblProfit = dsetProfitAndLoss.Tables[0];
        for (int i = 0; i < dsetProfitAndLoss.Tables.Count; ++i)
        {
            dtbl = dsetProfitAndLoss.Tables[i];
            decimal dcSum = 0;
            if (i == 0 || (i % 2) == 0)
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Debit)", string.Empty).ToString());
                    dcProfit = dcProfit - dcSum;
                }
            }
            else
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Credit)", string.Empty).ToString());
                    dcProfit = dcProfit + dcSum;
                }
            }
        }
        decimal decCurrentProfitLoss = 0;
        decCurrentProfitLoss = dcProfit + (dcClosingStock - dcOpeninggStock);
        decimal dcProfitOpening = 0;
        DataSet dsetProfitAndLossOpening = new DataSet();
        dsetProfitAndLossOpening = services.ProfitAndLossAnalysisUpToaDateForPreviousYears(DateTime.Parse(FromDateEng), CompanyId);
        DataTable dtblProfitOpening = new DataTable();
        dtblProfitOpening = dsetProfitAndLossOpening.Tables[0];
        for (int i = 0; i < dsetProfitAndLossOpening.Tables.Count; ++i)
        {
            dtbl = dsetProfitAndLossOpening.Tables[i];
            decimal dcSum = 0;
            if (i == 0 || (i % 2) == 0)
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Debit)", string.Empty).ToString());
                    dcProfitOpening = dcProfitOpening - dcSum;
                }
            }
            else
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Credit)", string.Empty).ToString());
                    dcProfitOpening = dcProfitOpening + dcSum;
                }
            }
        }
        DataTable dtblProfitLedgerOpening = new DataTable();
        dtblProfitLedgerOpening = DsetBalanceSheet.Tables[3];
        decimal decProfitLedgerOpening = 0;
        foreach (DataRow dRow in dtblProfitLedgerOpening.Rows)
        {
            decProfitLedgerOpening += decimal.Parse(dRow["Balance"].ToString());
        }
        DataTable dtblProf = new DataTable();
        dtblProf = DsetBalanceSheet.Tables[2];
        decimal decProfitLedger = 0;
        if (dtblProf.Rows.Count > 0)
        {
            decProfitLedger = decimal.Parse(dtblProf.Compute("Sum(Balance)", string.Empty).ToString());
        }
        decimal decTotalProfitAndLoss = 0;
        if (dcProfitOpening >= 0)
        {
            decTotalProfitAndLoss = decProfitLedger;
        }
        else if (dcProfitOpening < 0)
        {
            decTotalProfitAndLoss = decProfitLedger;
        }
        index = 0;
        if (dcClosingStock >= 0)
        {
            //---------- Asset ----------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Closing Stock" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcClosingStock, 2) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            dcTotalAsset += dcClosingStock;
        }
        else
        {
            //--------- Liability ---------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Closing Stock" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcClosingStock, 2) + @"</td>
            </tr>";
            dcTotalLiability += -dcClosingStock;
        }

        decimal decOpeningOfProfitAndLoss = decProfitLedgerOpening + dcProfitOpening;
        decimal decTotalProfitAndLossOverAll = decTotalProfitAndLoss + decOpeningOfProfitAndLoss + decCurrentProfitLoss;
        if (decTotalProfitAndLossOverAll <= 0)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            foreach (DataRow dRow in dtblProf.Rows)
            {
                if (dRow["Name"].ToString() == "Profit And Loss Account")
                {
                    values += @"<tr>
<td style='width: 260px;font-style:bold; color:red;text-align: left;'>" + dRow["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
                    if (decCurrentProfitLoss < 0)
                    {
                        decCurrentProfitLoss = decCurrentProfitLoss * -1;
                    }
                    values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(decTotalProfitAndLoss + decCurrentProfitLoss, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
                }
            }
            //-------------- Asset ---------------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;text-align: left;'>" + "Profit And Loss (Opening)" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + Math.Round(decTotalProfitAndLoss, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            //-------------- Asset ---------------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;text-align: left;'>" + "Current Period" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + Math.Round(decCurrentProfitLoss, PublicVariables._inNoOfDecimalPlaces) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            dcTotalAsset = dcTotalAsset + (decCurrentProfitLoss + decTotalProfitAndLoss);
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
        }
        else if (decTotalProfitAndLossOverAll > 0)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            foreach (DataRow dRow in dtblProf.Rows)
            {
                if (dRow["Name"].ToString() == "Profit And Loss Account")
                {
                    values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + dRow[1].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(decTotalProfitAndLoss + decCurrentProfitLoss, PublicVariables._inNoOfDecimalPlaces) + @"</td>
            </tr>";
                }
            }
            //------------ Liability ------------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + "Profit And Loss (Opening)" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + Math.Round(decTotalProfitAndLoss, PublicVariables._inNoOfDecimalPlaces) + @"</td>
            </tr>";
            dcTotalLiability += decOpeningOfProfitAndLoss;
            //------------ Liability ------------//

            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + "Current Period" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + Math.Round(decCurrentProfitLoss, PublicVariables._inNoOfDecimalPlaces) + @"</td>
            </tr>";
            dcTotalLiability = dcTotalLiability + (decCurrentProfitLoss + decTotalProfitAndLoss); //dcProfit;
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + "" + @"</td>
            </tr>";
        }
        decimal dcDiffAsset = 0;
        decimal dcDiffLiability = 0;
        decimal dcTotalValue = dcTotalAsset;
        if (dcTotalAsset != dcTotalLiability)
        {
            if (dcTotalAsset > dcTotalLiability)
            {
                //--------------- Liability exceeds so in asset side ----------------//

                values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "Difference" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + Math.Round((dcTotalAsset - dcTotalLiability), 2) + @"</td>
            </tr>";
                dcDiffLiability = dcTotalAsset - dcTotalLiability;
            }
            else
            {
                //--------------- Asset exceeds so in liability side ----------------//
                values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "Difference" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + Math.Round((dcTotalLiability - dcTotalAsset), 2) + @"</td>
            </tr>";
                dcDiffAsset = dcTotalLiability - dcTotalAsset;
            }
        }
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
            </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "__________________________" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "__________________________" + @"</td>
            </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "Total" + @"</td>
<td style='width: 140px;font-style:bold; text-align:right; color:Black;'>" + Math.Round((dcTotalAsset + dcDiffAsset), 2) + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "Total" + @"</td>
<td style='width: 140px;font-style:bold; text-align:right; color:Black;'>" + Math.Round((dcTotalLiability + dcDiffLiability), 2) + @"</td>
            </tr>";
        decPrintOrNot = dcTotalAsset + dcDiffAsset;
        decPrintOrNot1 = dcTotalLiability + dcDiffLiability;
        if (inCurrenRowIndex >= 0 && dtbl.Rows.Count > 0 && inCurrenRowIndex < dtbl.Rows.Count)
        {
            //if (dtbl.Rows[inCurrenRowIndex].Cells[inCurentcolIndex].Visible)
            //{
            //    dtbl.CurrentCell = dtbl.Rows[inCurrenRowIndex].Cells[inCurentcolIndex];
            //}
            //if (dtbl.CurrentCell != null && dtbl.CurrentCell.Visible)
            //    dtbl.CurrentCell.Selected = true;
        }
        inCurrenRowIndex = 0;
        values += " </table>";
        myMarkup = values;
    }
    private async Task ChangeFrom()
    {
        try
        {

            if (FromNepali == string.Empty)
            {
                FromNepali = DreamerDateConveter.convertToBS(DateTime.Now);
                FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
            }
            else
            {
                FromDateEng = DreamerDateConveter.convertToAD(FromNepali).ToShortDateString();
            }
        }
        catch (Exception ex)
        {
            if (FromDateEng == string.Empty)
            {
                Toaster.Add("Invalid From Date", MatToastType.Info, "Invalid", null);
            }
        }
    }
    private async Task ChangeTo()
    {
        try
        {

            if (ToNepali == string.Empty)
            {
                ToNepali = DreamerDateConveter.convertToBS(DateTime.Now);
                ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();
            }
            else
            {
                ToDateEng = DreamerDateConveter.convertToAD(ToNepali).ToShortDateString();
            }
        }
        catch (Exception ex)
        {
            if (ToDateEng == string.Empty)
            {
                Toaster.Add("Invalid To Date", MatToastType.Info, "Invalid", null);
            }
        }
    }
    public async Task Print()
    {
        await JsRuntime.InvokeVoidAsync("printDiv");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster Toaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PriviliageRepository priviliageRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TapSizeRepository settingRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AccountReportRepository services { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICompany icompany { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStringLocalizer<App> localizer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService sessionStorage { get; set; }
    }
}
#pragma warning restore 1591
